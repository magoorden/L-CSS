Reading CIF file "generated_files_MLDES/subplant_19.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name         Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   button1      0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   button2      1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   culvert_N_A  2      1 * 2     2 * 2       2 * 2       100%
  4      location pointer  n/a   culvert_N_S  3      1 * 2     2 * 2       2 * 2       100%
  5      location pointer  n/a   culvert_S_A  4      1 * 2     2 * 2       2 * 2       100%
  6      location pointer  n/a   culvert_S_S  5      1 * 2     2 * 2       2 * 2       100%
  7      location pointer  n/a   pad_N_A      6      2 * 2     3 * 2       4 * 2       75%
  8      location pointer  n/a   pad_N_S1     7      2 * 2     3 * 2       4 * 2       75%
  9      location pointer  n/a   pad_N_S2     8      2 * 2     3 * 2       4 * 2       75%
  10     location pointer  n/a   pad_N_S3     9      2 * 2     3 * 2       4 * 2       75%
  11     location pointer  n/a   pad_S_A      10     2 * 2     3 * 2       4 * 2       75%
  12     location pointer  n/a   pad_S_S1     11     2 * 2     3 * 2       4 * 2       75%
  13     location pointer  n/a   pad_S_S2     12     2 * 2     3 * 2       4 * 2       75%
  14     location pointer  n/a   pad_S_S3     13     2 * 2     3 * 2       4 * 2       75%
  -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
  Total                                       14     44        72          88          ~82%

Applying automatic variable ordering:
  Number of hyperedges: 47

  Applying FORCE algorithm:
    Maximum number of iterations: 30

    Total span:                   70 (total)                 1.49 (avg/edge) [before]
    Total span:                   62 (total)                 1.32 (avg/edge) [iteration 1]
    Total span:                   62 (total)                 1.32 (avg/edge) [iteration 2]
    Total span:                   62 (total)                 1.32 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                   62 (total)                 1.32 (avg/edge) [before]
    Total span:                   54 (total)                 1.15 (avg/edge) [window 4..7]
    Total span:                   54 (total)                 1.15 (avg/edge) [after]

  Variable order changed.

CIF variables and location pointers:
  Nr     Kind              Type  Name         Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   button1      0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   button2      1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   culvert_N_A  2      1 * 2     2 * 2       2 * 2       100%
  4      location pointer  n/a   culvert_N_S  3      1 * 2     2 * 2       2 * 2       100%
  5      location pointer  n/a   culvert_S_S  4      1 * 2     2 * 2       2 * 2       100%
  6      location pointer  n/a   culvert_S_A  5      1 * 2     2 * 2       2 * 2       100%
  7      location pointer  n/a   pad_N_S1     6      2 * 2     3 * 2       4 * 2       75%
  8      location pointer  n/a   pad_N_A      7      2 * 2     3 * 2       4 * 2       75%
  9      location pointer  n/a   pad_N_S2     8      2 * 2     3 * 2       4 * 2       75%
  10     location pointer  n/a   pad_N_S3     9      2 * 2     3 * 2       4 * 2       75%
  11     location pointer  n/a   pad_S_S1     10     2 * 2     3 * 2       4 * 2       75%
  12     location pointer  n/a   pad_S_S2     11     2 * 2     3 * 2       4 * 2       75%
  13     location pointer  n/a   pad_S_A      12     2 * 2     3 * 2       4 * 2       75%
  14     location pointer  n/a   pad_S_S3     13     2 * 2     3 * 2       4 * 2       75%
  -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
  Total                                       14     44        72          88          ~82%

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     button1.released
Initial   (aut/locs init predicate):     button2.released
Initial   (aut/locs init predicate):     pad_N_A.rest
Initial   (aut/locs init predicate):     pad_N_S1.closed
Initial   (aut/locs init predicate):     pad_N_S2.closed
Initial   (aut/locs init predicate):     pad_N_S3.closed
Initial   (aut/locs init predicate):     pad_S_A.rest
Initial   (aut/locs init predicate):     pad_S_S1.closed
Initial   (aut/locs init predicate):     pad_S_S2.closed
Initial   (aut/locs init predicate):     pad_S_S3.closed
Initial   (aut/locs init predicate):     culvert_N_A.closed
Initial   (aut/locs init predicate):     culvert_N_S.noflow
Initial   (aut/locs init predicate):     culvert_S_A.closed
Initial   (aut/locs init predicate):     culvert_S_S.noflow
Initial   (auts/locs init predicate):    <bdd 22n 1p>
Initial   (uncontrolled system):         <bdd 22n 1p>
Initial   (system, combined init/inv):   <bdd 22n 1p>

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   button1.released
Marked    (aut/locs marker predicate):   button2.released
Marked    (aut/locs marker predicate):   pad_N_A.rest
Marked    (aut/locs marker predicate):   pad_N_S1.closed
Marked    (aut/locs marker predicate):   pad_N_S2.closed
Marked    (aut/locs marker predicate):   pad_N_S3.closed
Marked    (aut/locs marker predicate):   pad_S_A.rest
Marked    (aut/locs marker predicate):   pad_S_S1.closed
Marked    (aut/locs marker predicate):   pad_S_S2.closed
Marked    (aut/locs marker predicate):   pad_S_S3.closed
Marked    (aut/locs marker predicate):   culvert_N_A.closed
Marked    (aut/locs marker predicate):   culvert_N_S.noflow
Marked    (aut/locs marker predicate):   culvert_S_A.closed
Marked    (aut/locs marker predicate):   culvert_S_S.noflow
Marked    (auts/locs marker predicate):  <bdd 22n 1p>
Marked    (uncontrolled system):         <bdd 22n 1p>
Marked    (system, combined marked/inv): <bdd 22n 1p>

State/event exclusion requirements:
  Event "pad_S_c_open" needs:
    culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and culvert_S_A.closed)
  Event "culvert_N_c_enable" needs:
    <bdd 16n 4p>
  Event "culvert_S_c_enable" needs:
    <bdd 16n 4p>
  Event "pad_N_c_open" needs:
    button1.pushed and button2.released
  Event "pad_N_c_close" needs:
    button2.pushed

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: button1_u_push) (guard: button1.released) (assignments: button1 := button1.pushed)
    Edge: (event: button1_u_release) (guard: button1.pushed) (assignments: button1 := button1.released)
    Edge: (event: button2_u_push) (guard: button2.released) (assignments: button2 := button2.pushed)
    Edge: (event: button2_u_release) (guard: button2.pushed) (assignments: button2 := button2.released)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open)
    Edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open)
    Edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open)
    Edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed)
    Edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed)
    Edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed)
    Edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_S1_u_closed_off) (guard: pad_S_S1.closed and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S1_u_open_on) (guard: pad_S_S1.between and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.open)
    Edge: (event: pad_S_S2_u_closed_off) (guard: pad_S_S2.closed and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S2_u_open_on) (guard: pad_S_S2.between and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.open)
    Edge: (event: pad_S_S3_u_closed_off) (guard: pad_S_A.opening and pad_S_S3.closed) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: pad_S_S3_u_open_on) (guard: pad_S_A.opening and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.open)
    Edge: (event: pad_S_S1_u_closed_on) (guard: pad_S_S1.between and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.closed)
    Edge: (event: pad_S_S1_u_open_off) (guard: pad_S_S1.open and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S2_u_closed_on) (guard: pad_S_S2.between and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.closed)
    Edge: (event: pad_S_S2_u_open_off) (guard: pad_S_S2.open and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S3_u_closed_on) (guard: pad_S_A.closing and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.closed)
    Edge: (event: pad_S_S3_u_open_off) (guard: pad_S_A.closing and pad_S_S3.open) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed) (assignments: culvert_N_A := culvert_N_A.open)
    Edge: (event: culvert_N_u_off) (guard: culvert_N_A.closed and culvert_N_S.flow) (assignments: culvert_N_S := culvert_N_S.noflow)
    Edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed)
    Edge: (event: culvert_N_u_on) (guard: culvert_N_A.open and culvert_N_S.noflow) (assignments: culvert_N_S := culvert_N_S.flow)
    Edge: (event: culvert_S_c_enable) (guard: culvert_S_A.closed) (assignments: culvert_S_A := culvert_S_A.open)
    Edge: (event: culvert_S_u_off) (guard: culvert_S_S.flow and culvert_S_A.closed) (assignments: culvert_S_S := culvert_S_S.noflow)
    Edge: (event: culvert_S_c_disable) (guard: culvert_S_A.open) (assignments: culvert_S_A := culvert_S_A.closed)
    Edge: (event: culvert_S_u_on) (guard: culvert_S_S.noflow and culvert_S_A.open) (assignments: culvert_S_S := culvert_S_S.flow)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "pad_N_S1" (group: 6, domain: 12+13, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "pad_N_A" (group: 7, domain: 14+15, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "pad_N_S2" (group: 8, domain: 16+17, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: true -> <bdd 8n 16p> [range: true, variable: location pointer for automaton "pad_N_S3" (group: 9, domain: 18+19, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: <bdd 8n 16p> -> <bdd 10n 32p> [range: true, variable: location pointer for automaton "pad_S_S1" (group: 10, domain: 20+21, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: <bdd 10n 32p> -> <bdd 12n 64p> [range: true, variable: location pointer for automaton "pad_S_S2" (group: 11, domain: 22+23, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: <bdd 12n 64p> -> <bdd 14n 128p> [range: true, variable: location pointer for automaton "pad_S_A" (group: 12, domain: 24+25, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: <bdd 14n 128p> -> <bdd 16n 256p> [range: true, variable: location pointer for automaton "pad_S_S3" (group: 13, domain: 26+27, BDD variables: 2, CIF/BDD values: 3/4)].

Extended controlled-behavior predicate using variable ranges: <bdd 16n 256p>.

Restricting behavior using state/event exclusion requirements.

Edge (event: pad_N_c_open) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.opening): guard: pad_N_A.rest -> button1.pushed and (button2.released and pad_N_A.rest) [requirement: button1.pushed and button2.released].
Edge (event: pad_N_c_open) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.opening): guard: pad_N_A.closing -> button1.pushed and (button2.released and pad_N_A.closing) [requirement: button1.pushed and button2.released].
Edge (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing): guard: pad_N_A.rest -> button2.pushed and pad_N_A.rest [requirement: button2.pushed].
Edge (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing): guard: pad_N_A.opening -> button2.pushed and pad_N_A.opening [requirement: button2.pushed].
Edge (event: pad_S_c_open) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.opening): guard: pad_S_A.rest -> culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and (culvert_S_A.closed and pad_S_A.rest)) [requirement: culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and culvert_S_A.closed)].
Edge (event: pad_S_c_open) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.opening): guard: pad_S_A.closing -> culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and (culvert_S_A.closed and pad_S_A.closing)) [requirement: culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and culvert_S_A.closed)].
Edge (event: culvert_N_c_enable) (guard: culvert_N_A.closed) (assignments: culvert_N_A := culvert_N_A.open): guard: culvert_N_A.closed -> <bdd 17n 4p> [requirement: <bdd 16n 4p>].
Edge (event: culvert_S_c_enable) (guard: culvert_S_A.closed) (assignments: culvert_S_A := culvert_S_A.open): guard: culvert_S_A.closed -> <bdd 17n 4p> [requirement: <bdd 16n 4p>].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: <bdd 16n 256p>)
    Edge: (event: button1_u_push) (guard: button1.released) (assignments: button1 := button1.pushed)
    Edge: (event: button1_u_release) (guard: button1.pushed) (assignments: button1 := button1.released)
    Edge: (event: button2_u_push) (guard: button2.released) (assignments: button2 := button2.pushed)
    Edge: (event: button2_u_release) (guard: button2.pushed) (assignments: button2 := button2.released)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.rest -> button1.pushed and (button2.released and pad_N_A.rest)) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.closing -> button1.pushed and (button2.released and pad_N_A.closing)) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.rest -> button2.pushed and pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.opening -> button2.pushed and pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open)
    Edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open)
    Edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open)
    Edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed)
    Edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed)
    Edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed)
    Edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.rest -> culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and (culvert_S_A.closed and pad_S_A.rest))) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.closing -> culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and (culvert_S_A.closed and pad_S_A.closing))) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_S1_u_closed_off) (guard: pad_S_S1.closed and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S1_u_open_on) (guard: pad_S_S1.between and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.open)
    Edge: (event: pad_S_S2_u_closed_off) (guard: pad_S_S2.closed and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S2_u_open_on) (guard: pad_S_S2.between and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.open)
    Edge: (event: pad_S_S3_u_closed_off) (guard: pad_S_A.opening and pad_S_S3.closed) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: pad_S_S3_u_open_on) (guard: pad_S_A.opening and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.open)
    Edge: (event: pad_S_S1_u_closed_on) (guard: pad_S_S1.between and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.closed)
    Edge: (event: pad_S_S1_u_open_off) (guard: pad_S_S1.open and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S2_u_closed_on) (guard: pad_S_S2.between and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.closed)
    Edge: (event: pad_S_S2_u_open_off) (guard: pad_S_S2.open and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S3_u_closed_on) (guard: pad_S_A.closing and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.closed)
    Edge: (event: pad_S_S3_u_open_off) (guard: pad_S_A.closing and pad_S_S3.open) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed -> <bdd 17n 4p>) (assignments: culvert_N_A := culvert_N_A.open)
    Edge: (event: culvert_N_u_off) (guard: culvert_N_A.closed and culvert_N_S.flow) (assignments: culvert_N_S := culvert_N_S.noflow)
    Edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed)
    Edge: (event: culvert_N_u_on) (guard: culvert_N_A.open and culvert_N_S.noflow) (assignments: culvert_N_S := culvert_N_S.flow)
    Edge: (event: culvert_S_c_enable) (guard: culvert_S_A.closed -> <bdd 17n 4p>) (assignments: culvert_S_A := culvert_S_A.open)
    Edge: (event: culvert_S_u_off) (guard: culvert_S_S.flow and culvert_S_A.closed) (assignments: culvert_S_S := culvert_S_S.noflow)
    Edge: (event: culvert_S_c_disable) (guard: culvert_S_A.open) (assignments: culvert_S_A := culvert_S_A.closed)
    Edge: (event: culvert_S_u_on) (guard: culvert_S_S.noflow and culvert_S_A.open) (assignments: culvert_S_S := culvert_S_S.flow)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 22n 1p> [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 22n 1p> -> <bdd 21n 1p> [backward reach with edge: (event: button1_u_release) (guard: button1.pushed) (assignments: button1 := button1.released), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 21n 1p> -> <bdd 20n 1p> [backward reach with edge: (event: button2_u_release) (guard: button2.pushed) (assignments: button2 := button2.released), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 20n 1p> -> <bdd 19n 1p> [backward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 19n 1p> -> <bdd 20n 2p> [backward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 20n 2p> -> <bdd 23n 3p> [backward reach with edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 23n 3p> -> <bdd 23n 4p> [backward reach with edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 23n 4p> -> <bdd 24n 5p> [backward reach with edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 24n 5p> -> <bdd 25n 8p> [backward reach with edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 25n 8p> -> <bdd 26n 8p> [backward reach with edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 26n 8p> -> <bdd 27n 14p> [backward reach with edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 27n 14p> -> <bdd 26n 14p> [backward reach with edge: (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 26n 14p> -> <bdd 27n 28p> [backward reach with edge: (event: pad_S_c_stop) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 27n 28p> -> <bdd 32n 42p> [backward reach with edge: (event: pad_S_S1_u_closed_on) (guard: pad_S_S1.between and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 32n 42p> -> <bdd 32n 56p> [backward reach with edge: (event: pad_S_S1_u_open_off) (guard: pad_S_S1.open and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 32n 56p> -> <bdd 31n 70p> [backward reach with edge: (event: pad_S_S2_u_closed_on) (guard: pad_S_S2.between and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 31n 70p> -> <bdd 32n 112p> [backward reach with edge: (event: pad_S_S2_u_open_off) (guard: pad_S_S2.open and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 32n 112p> -> <bdd 33n 126p> [backward reach with edge: (event: pad_S_S3_u_closed_on) (guard: pad_S_A.closing and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 33n 126p> -> <bdd 34n 224p> [backward reach with edge: (event: pad_S_S3_u_open_off) (guard: pad_S_A.closing and pad_S_S3.open) (assignments: pad_S_S3 := pad_S_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 34n 224p> -> <bdd 33n 224p> [backward reach with edge: (event: culvert_N_u_off) (guard: culvert_N_A.closed and culvert_N_S.flow) (assignments: culvert_N_S := culvert_N_S.noflow), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 33n 224p> -> <bdd 32n 224p> [backward reach with edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 32n 224p> -> <bdd 31n 224p> [backward reach with edge: (event: culvert_S_u_off) (guard: culvert_S_S.flow and culvert_S_A.closed) (assignments: culvert_S_S := culvert_S_S.noflow), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 31n 224p> -> <bdd 30n 224p> [backward reach with edge: (event: culvert_S_c_disable) (guard: culvert_S_A.open) (assignments: culvert_S_A := culvert_S_A.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward reachability: iteration 2.
Backward controlled-behavior: <bdd 30n 224p> -> <bdd 36n 432p> [backward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.rest -> button2.pushed and pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 36n 432p> -> <bdd 35n 480p> [backward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.opening -> button2.pushed and pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 35n 480p> -> <bdd 33n 450p> [backward reach with edge: (event: pad_S_c_close) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 33n 450p> -> <bdd 28n 480p> [backward reach with edge: (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward reachability: iteration 3.
Backward controlled-behavior: <bdd 28n 480p> -> <bdd 16n 256p> [backward reach with edge: (event: button2_u_push) (guard: button2.released) (assignments: button2 := button2.pushed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward reachability: iteration 4.
Backward controlled-behavior: <bdd 16n 256p> [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 16n 255p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: <bdd 22n 1p> [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: <bdd 22n 1p> -> <bdd 21n 1p> [forward reach with edge: (event: button1_u_push) (guard: button1.released) (assignments: button1 := button1.pushed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 21n 1p> -> <bdd 20n 1p> [forward reach with edge: (event: button2_u_push) (guard: button2.released) (assignments: button2 := button2.pushed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 20n 1p> -> <bdd 28n 3p> [forward reach with edge: (event: pad_N_c_open) (guard: pad_N_A.rest -> button1.pushed and (button2.released and pad_N_A.rest)) (assignments: pad_N_A := pad_N_A.opening), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 28n 3p> -> <bdd 36n 4p> [forward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.rest -> button2.pushed and pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 36n 4p> -> <bdd 38n 5p> [forward reach with edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 38n 5p> -> <bdd 38n 6p> [forward reach with edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 38n 6p> -> <bdd 40n 7p> [forward reach with edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 40n 7p> -> <bdd 41n 10p> [forward reach with edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 41n 10p> -> <bdd 42n 10p> [forward reach with edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 42n 10p> -> <bdd 43n 16p> [forward reach with edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 43n 16p> -> <bdd 42n 16p> [forward reach with edge: (event: pad_S_c_open) (guard: pad_S_A.rest -> culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and (culvert_S_A.closed and pad_S_A.rest))) (assignments: pad_S_A := pad_S_A.opening), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 42n 16p> -> <bdd 43n 32p> [forward reach with edge: (event: pad_S_c_close) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 43n 32p> -> <bdd 47n 48p> [forward reach with edge: (event: pad_S_S1_u_closed_off) (guard: pad_S_S1.closed and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 47n 48p> -> <bdd 47n 64p> [forward reach with edge: (event: pad_S_S1_u_open_on) (guard: pad_S_S1.between and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 47n 64p> -> <bdd 46n 80p> [forward reach with edge: (event: pad_S_S2_u_closed_off) (guard: pad_S_S2.closed and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 46n 80p> -> <bdd 47n 128p> [forward reach with edge: (event: pad_S_S2_u_open_on) (guard: pad_S_S2.between and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 47n 128p> -> <bdd 47n 128p> [forward reach with edge: (event: pad_S_S3_u_closed_off) (guard: pad_S_A.opening and pad_S_S3.closed) (assignments: pad_S_S3 := pad_S_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 47n 128p> -> <bdd 48n 240p> [forward reach with edge: (event: pad_S_S3_u_open_on) (guard: pad_S_A.opening and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 48n 240p> -> <bdd 70n 244p> [forward reach with edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed -> <bdd 17n 4p>) (assignments: culvert_N_A := culvert_N_A.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 70n 244p> -> <bdd 68n 244p> [forward reach with edge: (event: culvert_N_u_on) (guard: culvert_N_A.open and culvert_N_S.noflow) (assignments: culvert_N_S := culvert_N_S.flow), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 68n 244p> -> <bdd 66n 248p> [forward reach with edge: (event: culvert_S_c_enable) (guard: culvert_S_A.closed -> <bdd 17n 4p>) (assignments: culvert_S_A := culvert_S_A.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 66n 248p> -> <bdd 68n 256p> [forward reach with edge: (event: culvert_S_u_on) (guard: culvert_S_S.noflow and culvert_S_A.open) (assignments: culvert_S_S := culvert_S_S.flow), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward reachability: iteration 2.
Forward controlled-behavior: <bdd 68n 256p> -> <bdd 59n 218p> [forward reach with edge: (event: button1_u_release) (guard: button1.pushed) (assignments: button1 := button1.released), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 59n 218p> -> <bdd 59n 398p> [forward reach with edge: (event: button2_u_push) (guard: button2.released) (assignments: button2 := button2.pushed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 59n 398p> -> <bdd 44n 199p> [forward reach with edge: (event: button2_u_release) (guard: button2.pushed) (assignments: button2 := button2.released), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 44n 199p> -> <bdd 56n 601p> [forward reach with edge: (event: pad_N_c_open) (guard: pad_N_A.rest -> button1.pushed and (button2.released and pad_N_A.rest)) (assignments: pad_N_A := pad_N_A.opening), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 56n 601p> -> <bdd 68n 1,160p> [forward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.opening -> button2.pushed and pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 68n 1,160p> -> <bdd 64n 1,010p> [forward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 64n 1,010p> -> <bdd 66n 1,014p> [forward reach with edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 66n 1,014p> -> <bdd 66n 1,018p> [forward reach with edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 66n 1,018p> -> <bdd 66n 1,018p> [forward reach with edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 66n 1,018p> -> <bdd 67n 1,030p> [forward reach with edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 67n 1,030p> -> <bdd 68n 1,030p> [forward reach with edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 68n 1,030p> -> <bdd 69n 1,054p> [forward reach with edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 69n 1,054p> -> <bdd 71n 1,978p> [forward reach with edge: (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 71n 1,978p> -> <bdd 65n 1,120p> [forward reach with edge: (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 65n 1,120p> -> <bdd 65n 1,152p> [forward reach with edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 65n 1,152p> -> <bdd 61n 1,120p> [forward reach with edge: (event: culvert_S_c_disable) (guard: culvert_S_A.open) (assignments: culvert_S_A := culvert_S_A.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward reachability: iteration 3.
Forward controlled-behavior: <bdd 61n 1,120p> -> <bdd 55n 584p> [forward reach with edge: (event: button1_u_release) (guard: button1.pushed) (assignments: button1 := button1.released), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 55n 584p> -> <bdd 52n 632p> [forward reach with edge: (event: button2_u_push) (guard: button2.released) (assignments: button2 := button2.pushed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 52n 632p> -> <bdd 39n 308p> [forward reach with edge: (event: button2_u_release) (guard: button2.pushed) (assignments: button2 := button2.released), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 39n 308p> -> <bdd 51n 664p> [forward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.opening -> button2.pushed and pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 51n 664p> -> <bdd 47n 644p> [forward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward reachability: iteration 4.
Forward controlled-behavior: <bdd 47n 644p> -> <bdd 34n 320p> [forward reach with edge: (event: button2_u_release) (guard: button2.pushed) (assignments: button2 := button2.released), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward reachability: iteration 5.
Forward controlled-behavior: <bdd 34n 320p> [fixed point].
Controlled behavior: <bdd 16n 256p> -> <bdd 34n 320p>.

Round 1: finished, need another round.

Round 2: started.

Round 2: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 22n 1p> [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 22n 1p> -> <bdd 21n 1p> [backward reach with edge: (event: button1_u_release) (guard: button1.pushed) (assignments: button1 := button1.released), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 21n 1p> -> <bdd 20n 1p> [backward reach with edge: (event: button2_u_release) (guard: button2.pushed) (assignments: button2 := button2.released), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 20n 1p> -> <bdd 19n 1p> [backward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 19n 1p> -> <bdd 20n 2p> [backward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 20n 2p> -> <bdd 23n 3p> [backward reach with edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 23n 3p> -> <bdd 23n 4p> [backward reach with edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 23n 4p> -> <bdd 24n 5p> [backward reach with edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 24n 5p> -> <bdd 25n 8p> [backward reach with edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 25n 8p> -> <bdd 26n 8p> [backward reach with edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 26n 8p> -> <bdd 27n 14p> [backward reach with edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 27n 14p> -> <bdd 26n 14p> [backward reach with edge: (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 26n 14p> -> <bdd 27n 28p> [backward reach with edge: (event: pad_S_c_stop) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 27n 28p> -> <bdd 32n 42p> [backward reach with edge: (event: pad_S_S1_u_closed_on) (guard: pad_S_S1.between and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.closed), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 32n 42p> -> <bdd 32n 56p> [backward reach with edge: (event: pad_S_S1_u_open_off) (guard: pad_S_S1.open and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 32n 56p> -> <bdd 31n 70p> [backward reach with edge: (event: pad_S_S2_u_closed_on) (guard: pad_S_S2.between and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.closed), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 31n 70p> -> <bdd 32n 112p> [backward reach with edge: (event: pad_S_S2_u_open_off) (guard: pad_S_S2.open and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 32n 112p> -> <bdd 33n 126p> [backward reach with edge: (event: pad_S_S3_u_closed_on) (guard: pad_S_A.closing and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.closed), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 33n 126p> -> <bdd 34n 224p> [backward reach with edge: (event: pad_S_S3_u_open_off) (guard: pad_S_A.closing and pad_S_S3.open) (assignments: pad_S_S3 := pad_S_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 34n 224p> -> <bdd 56n 238p> [backward reach with edge: (event: culvert_N_u_off) (guard: culvert_N_A.closed and culvert_N_S.flow) (assignments: culvert_N_S := culvert_N_S.noflow), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 56n 238p> -> <bdd 56n 252p> [backward reach with edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 56n 252p> -> <bdd 55n 266p> [backward reach with edge: (event: culvert_S_u_off) (guard: culvert_S_S.flow and culvert_S_A.closed) (assignments: culvert_S_S := culvert_S_S.noflow), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 55n 266p> -> <bdd 54n 280p> [backward reach with edge: (event: culvert_S_c_disable) (guard: culvert_S_A.open) (assignments: culvert_S_A := culvert_S_A.closed), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward reachability: iteration 2.
Backward controlled-behavior: <bdd 54n 280p> -> <bdd 69n 540p> [backward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.rest -> button2.pushed and pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 69n 540p> -> <bdd 67n 600p> [backward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.opening -> button2.pushed and pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 67n 600p> -> <bdd 65n 570p> [backward reach with edge: (event: pad_S_c_close) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward controlled-behavior: <bdd 65n 570p> -> <bdd 61n 600p> [backward reach with edge: (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward reachability: iteration 3.
Backward controlled-behavior: <bdd 61n 600p> -> <bdd 34n 320p> [backward reach with edge: (event: button2_u_push) (guard: button2.released) (assignments: button2 := button2.pushed), restricted to current/previous controlled-behavior predicate: <bdd 34n 320p>]
Backward reachability: iteration 4.
Backward controlled-behavior: <bdd 34n 320p> [fixed point].

Round 2: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 34n 763p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 2: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: pad_N_c_open) (guard: pad_N_A.rest -> button1.pushed and (button2.released and pad_N_A.rest)) (assignments: pad_N_A := pad_N_A.opening): guard: button1.pushed and (button2.released and pad_N_A.rest) -> <bdd 36n 160p>.
Edge (event: pad_N_c_open) (guard: pad_N_A.closing -> button1.pushed and (button2.released and pad_N_A.closing)) (assignments: pad_N_A := pad_N_A.opening): guard: button1.pushed and (button2.released and pad_N_A.closing) -> <bdd 36n 160p>.
Edge (event: pad_N_c_close) (guard: pad_N_A.rest -> button2.pushed and pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing): guard: button2.pushed and pad_N_A.rest -> <bdd 35n 160p>.
Edge (event: pad_N_c_close) (guard: pad_N_A.opening -> button2.pushed and pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing): guard: button2.pushed and pad_N_A.opening -> <bdd 35n 160p>.
Edge (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest): guard: pad_N_A.opening -> <bdd 34n 160p>.
Edge (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest): guard: pad_N_A.closing -> <bdd 34n 160p>.
Edge (event: pad_S_c_open) (guard: pad_S_A.rest -> culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and (culvert_S_A.closed and pad_S_A.rest))) (assignments: pad_S_A := pad_S_A.opening): guard: culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and (culvert_S_A.closed and pad_S_A.rest)) -> <bdd 20n 128p>.
Edge (event: pad_S_c_open) (guard: pad_S_A.closing -> culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and (culvert_S_A.closed and pad_S_A.closing))) (assignments: pad_S_A := pad_S_A.opening): guard: culvert_N_A.closed and culvert_N_S.noflow and (culvert_S_S.noflow and (culvert_S_A.closed and pad_S_A.closing)) -> <bdd 20n 128p>.
Edge (event: pad_S_c_close) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.closing): guard: pad_S_A.rest -> <bdd 35n 192p>.
Edge (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing): guard: pad_S_A.opening -> <bdd 35n 192p>.
Edge (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest): guard: pad_S_A.opening -> <bdd 35n 192p>.
Edge (event: pad_S_c_stop) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.rest): guard: pad_S_A.closing -> <bdd 35n 192p>.
Edge (event: culvert_N_c_enable) (guard: culvert_N_A.closed -> <bdd 17n 4p>) (assignments: culvert_N_A := culvert_N_A.open): guard: <bdd 17n 4p> -> <bdd 15n 1p>.
Edge (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed): guard: culvert_N_A.open -> <bdd 34n 304p>.
Edge (event: culvert_S_c_enable) (guard: culvert_S_A.closed -> <bdd 17n 4p>) (assignments: culvert_S_A := culvert_S_A.open): guard: <bdd 17n 4p> -> <bdd 15n 1p>.
Edge (event: culvert_S_c_disable) (guard: culvert_S_A.open) (assignments: culvert_S_A := culvert_S_A.closed): guard: culvert_S_A.open -> <bdd 35n 304p>.

Final synthesis result:
  State: (controlled-behavior: <bdd 34n 320p>)
    Edge: (event: button1_u_push) (guard: button1.released) (assignments: button1 := button1.pushed)
    Edge: (event: button1_u_release) (guard: button1.pushed) (assignments: button1 := button1.released)
    Edge: (event: button2_u_push) (guard: button2.released) (assignments: button2 := button2.pushed)
    Edge: (event: button2_u_release) (guard: button2.pushed) (assignments: button2 := button2.released)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.rest -> <bdd 36n 160p>) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.closing -> <bdd 36n 160p>) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.rest -> <bdd 35n 160p>) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.opening -> <bdd 35n 160p>) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.opening -> <bdd 34n 160p>) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.closing -> <bdd 34n 160p>) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open)
    Edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open)
    Edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open)
    Edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed)
    Edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed)
    Edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed)
    Edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.rest -> <bdd 20n 128p>) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.closing -> <bdd 20n 128p>) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.rest -> <bdd 35n 192p>) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.opening -> <bdd 35n 192p>) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.opening -> <bdd 35n 192p>) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.closing -> <bdd 35n 192p>) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_S1_u_closed_off) (guard: pad_S_S1.closed and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S1_u_open_on) (guard: pad_S_S1.between and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.open)
    Edge: (event: pad_S_S2_u_closed_off) (guard: pad_S_S2.closed and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S2_u_open_on) (guard: pad_S_S2.between and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.open)
    Edge: (event: pad_S_S3_u_closed_off) (guard: pad_S_A.opening and pad_S_S3.closed) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: pad_S_S3_u_open_on) (guard: pad_S_A.opening and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.open)
    Edge: (event: pad_S_S1_u_closed_on) (guard: pad_S_S1.between and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.closed)
    Edge: (event: pad_S_S1_u_open_off) (guard: pad_S_S1.open and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S2_u_closed_on) (guard: pad_S_S2.between and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.closed)
    Edge: (event: pad_S_S2_u_open_off) (guard: pad_S_S2.open and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S3_u_closed_on) (guard: pad_S_A.closing and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.closed)
    Edge: (event: pad_S_S3_u_open_off) (guard: pad_S_A.closing and pad_S_S3.open) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed -> <bdd 15n 1p>) (assignments: culvert_N_A := culvert_N_A.open)
    Edge: (event: culvert_N_u_off) (guard: culvert_N_A.closed and culvert_N_S.flow) (assignments: culvert_N_S := culvert_N_S.noflow)
    Edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open -> <bdd 34n 304p>) (assignments: culvert_N_A := culvert_N_A.closed)
    Edge: (event: culvert_N_u_on) (guard: culvert_N_A.open and culvert_N_S.noflow) (assignments: culvert_N_S := culvert_N_S.flow)
    Edge: (event: culvert_S_c_enable) (guard: culvert_S_A.closed -> <bdd 15n 1p>) (assignments: culvert_S_A := culvert_S_A.open)
    Edge: (event: culvert_S_u_off) (guard: culvert_S_S.flow and culvert_S_A.closed) (assignments: culvert_S_S := culvert_S_S.noflow)
    Edge: (event: culvert_S_c_disable) (guard: culvert_S_A.open -> <bdd 35n 304p>) (assignments: culvert_S_A := culvert_S_A.closed)
    Edge: (event: culvert_S_u_on) (guard: culvert_S_S.noflow and culvert_S_A.open) (assignments: culvert_S_S := culvert_S_S.flow)

Controlled system:                     exactly 35,964 states.

Initial (synthesis result):            <bdd 34n 320p>
Initial (uncontrolled system):         <bdd 22n 1p>
Initial (controlled system):           <bdd 22n 1p>
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event pad_N_c_open: guard: <bdd 34n 160p> -> true [assume <bdd 34n 160p>].
  Event pad_N_c_close: guard: <bdd 33n 160p> -> true [assume <bdd 33n 160p>].
  Event pad_N_c_stop: guard: <bdd 36n 320p> -> true [assume <bdd 36n 320p>].
  Event pad_S_c_open: guard: <bdd 19n 128p> -> true [assume <bdd 19n 128p>].
  Event pad_S_c_close: guard: <bdd 33n 192p> -> true [assume <bdd 34n 192p>].
  Event pad_S_c_stop: guard: <bdd 37n 384p> -> true [assume <bdd 36n 320p>].
  Event culvert_N_c_enable: guard: <bdd 15n 1p> -> true [assume <bdd 15n 1p>].
  Event culvert_N_c_disable: guard: <bdd 34n 304p> -> true [assume <bdd 16n 16p>].
  Event culvert_S_c_enable: guard: <bdd 15n 1p> -> true [assume <bdd 15n 1p>].
  Event culvert_S_c_disable: guard: <bdd 35n 304p> -> true [assume <bdd 16n 16p>].

Constructing output CIF specification.
Writing output CIF file "generated_files_MLDES/subplant_19_sup.cif".
