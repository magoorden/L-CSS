Reading CIF file "generated_files_MLDES/subplant_35.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name          Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   button7       0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   button8       1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   gate_U_N_Dir  2      2 * 2     3 * 2       4 * 2       75%
  4      location pointer  n/a   gate_U_N_S    3      3 * 2     7 * 2       8 * 2       ~88%
  5      location pointer  n/a   s_equal_U     4      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  Total                                        5      16        32          36          ~89%

Applying automatic variable ordering:
  Number of hyperedges: 24

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                   17 (total)                 0.71 (avg/edge) [before]
    Total span:                   15 (total)                 0.63 (avg/edge) [iteration 1]
    Total span:                   15 (total)                 0.63 (avg/edge) [iteration 2]
    Total span:                   15 (total)                 0.63 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                   15 (total)                 0.63 (avg/edge) [before]
    Total span:                   15 (total)                 0.63 (avg/edge) [after]

  Variable order changed.

CIF variables and location pointers:
  Nr     Kind              Type  Name          Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   button7       0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   button8       1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   gate_U_N_S    2      3 * 2     7 * 2       8 * 2       ~88%
  4      location pointer  n/a   gate_U_N_Dir  3      2 * 2     3 * 2       4 * 2       75%
  5      location pointer  n/a   s_equal_U     4      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  Total                                        5      16        32          36          ~89%

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     button7.released
Initial   (aut/locs init predicate):     button8.released
Initial   (aut/locs init predicate):     gate_U_N_S.closed
Initial   (aut/locs init predicate):     gate_U_N_Dir.off
Initial   (aut/locs init predicate):     s_equal_U.off
Initial   (auts/locs init predicate):    button7.released and button8.released and (gate_U_N_S.closed and (gate_U_N_Dir.off and s_equal_U.off))
Initial   (uncontrolled system):         button7.released and button8.released and (gate_U_N_S.closed and (gate_U_N_Dir.off and s_equal_U.off))
Initial   (system, combined init/inv):   button7.released and button8.released and (gate_U_N_S.closed and (gate_U_N_Dir.off and s_equal_U.off))

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   button7.released
Marked    (aut/locs marker predicate):   button8.released
Marked    (aut/locs marker predicate):   gate_U_N_S.closed
Marked    (aut/locs marker predicate):   gate_U_N_Dir.off
Marked    (aut/locs marker predicate):   true
Marked    (auts/locs marker predicate):  button7.released and button8.released and (gate_U_N_S.closed and gate_U_N_Dir.off)
Marked    (uncontrolled system):         button7.released and button8.released and (gate_U_N_S.closed and gate_U_N_Dir.off)
Marked    (system, combined marked/inv): button7.released and button8.released and (gate_U_N_S.closed and gate_U_N_Dir.off)

State/event exclusion requirements:
  Event "gate_U_N_c_open" needs:
    s_equal_U.on
    button7.pushed and ((button7.released or (button8.pushed or not gate_U_N_S.open)) and (button7.released or button8.released))
  Event "gate_U_N_c_close" needs:
    button8.pushed and (button8.released or not gate_U_N_S.closed)

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: button7_u_push) (guard: button7.released) (assignments: button7 := button7.pushed)
    Edge: (event: button7_u_release) (guard: button7.pushed) (assignments: button7 := button7.released)
    Edge: (event: button8_u_push) (guard: button8.released) (assignments: button8 := button8.pushed)
    Edge: (event: button8_u_release) (guard: button8.pushed) (assignments: button8 := button8.released)
    Edge: (event: gate_U_N_u_s1_on) (guard: gate_U_N_S.closed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.bclosed)
    Edge: (event: gate_U_N_u_s1_off) (guard: gate_U_N_S.bclosed and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.closed)
    Edge: (event: gate_U_N_u_s2_on) (guard: gate_U_N_S.bclosed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.fclosed)
    Edge: (event: gate_U_N_u_s2_off) (guard: gate_U_N_S.fclosed and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.bclosed)
    Edge: (event: gate_U_N_u_s3_on) (guard: gate_U_N_S.fclosed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.middle)
    Edge: (event: gate_U_N_u_s3_off) (guard: gate_U_N_S.middle and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.fclosed)
    Edge: (event: gate_U_N_u_s4_off) (guard: gate_U_N_S.middle and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.fopen)
    Edge: (event: gate_U_N_u_s4_on) (guard: gate_U_N_S.fopen and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.middle)
    Edge: (event: gate_U_N_u_s5_off) (guard: gate_U_N_S.fopen and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.bopen)
    Edge: (event: gate_U_N_u_s5_on) (guard: gate_U_N_S.bopen and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.fopen)
    Edge: (event: gate_U_N_u_s6_off) (guard: gate_U_N_S.bopen and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.open)
    Edge: (event: gate_U_N_u_s6_on) (guard: gate_U_N_S.open and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.bopen)
    Edge: (event: gate_U_N_c_open) (guard: gate_U_N_Dir.off) (assignments: gate_U_N_Dir := gate_U_N_Dir.opening)
    Edge: (event: gate_U_N_c_open) (guard: gate_U_N_Dir.closing) (assignments: gate_U_N_Dir := gate_U_N_Dir.opening)
    Edge: (event: gate_U_N_c_close) (guard: gate_U_N_Dir.off) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing)
    Edge: (event: gate_U_N_c_close) (guard: gate_U_N_Dir.opening) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing)
    Edge: (event: gate_U_N_c_stop) (guard: gate_U_N_Dir.opening) (assignments: gate_U_N_Dir := gate_U_N_Dir.off)
    Edge: (event: gate_U_N_c_stop) (guard: gate_U_N_Dir.closing) (assignments: gate_U_N_Dir := gate_U_N_Dir.off)
    Edge: (event: s_equal_U_u_equal_on) (guard: s_equal_U.off) (assignments: s_equal_U := s_equal_U.on)
    Edge: (event: s_equal_U_u_equal_off) (guard: s_equal_U.on) (assignments: s_equal_U := s_equal_U.off)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "gate_U_N_S" (group: 2, domain: 4+5, BDD variables: 3, CIF/BDD values: 7/8)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "gate_U_N_Dir" (group: 3, domain: 6+7, BDD variables: 2, CIF/BDD values: 3/4)].

Extended controlled-behavior predicate using variable ranges: true.

Restricting behavior using state/event exclusion requirements.

Edge (event: gate_U_N_c_open) (guard: gate_U_N_Dir.off) (assignments: gate_U_N_Dir := gate_U_N_Dir.opening): guard: gate_U_N_Dir.off -> button7.pushed and button8.released and ((gate_U_N_S.closed or gate_U_N_S.fopen) and (gate_U_N_Dir.off and s_equal_U.on)) or (button7.pushed and button8.released and (gate_U_N_S.fclosed and (gate_U_N_Dir.off and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and (gate_U_N_Dir.off and s_equal_U.on))) [requirement: button7.pushed and button8.released and ((gate_U_N_S.closed or gate_U_N_S.fopen) and s_equal_U.on) or (button7.pushed and button8.released and (gate_U_N_S.fclosed and s_equal_U.on) or button7.pushed and button8.released and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and s_equal_U.on))].
Edge (event: gate_U_N_c_open) (guard: gate_U_N_Dir.closing) (assignments: gate_U_N_Dir := gate_U_N_Dir.opening): guard: gate_U_N_Dir.closing -> button7.pushed and button8.released and ((gate_U_N_S.closed or gate_U_N_S.fopen) and (gate_U_N_Dir.closing and s_equal_U.on)) or (button7.pushed and button8.released and (gate_U_N_S.fclosed and (gate_U_N_Dir.closing and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and (gate_U_N_Dir.closing and s_equal_U.on))) [requirement: button7.pushed and button8.released and ((gate_U_N_S.closed or gate_U_N_S.fopen) and s_equal_U.on) or (button7.pushed and button8.released and (gate_U_N_S.fclosed and s_equal_U.on) or button7.pushed and button8.released and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and s_equal_U.on))].
Edge (event: gate_U_N_c_close) (guard: gate_U_N_Dir.off) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing): guard: gate_U_N_Dir.off -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.off) or (button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.off) or button8.pushed and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and gate_U_N_Dir.off)) [requirement: button8.pushed and (button8.released or not gate_U_N_S.closed)].
Edge (event: gate_U_N_c_close) (guard: gate_U_N_Dir.opening) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing): guard: gate_U_N_Dir.opening -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.opening) or (button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.opening) or button8.pushed and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and gate_U_N_Dir.opening)) [requirement: button8.pushed and (button8.released or not gate_U_N_S.closed)].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: true)
    Edge: (event: button7_u_push) (guard: button7.released) (assignments: button7 := button7.pushed)
    Edge: (event: button7_u_release) (guard: button7.pushed) (assignments: button7 := button7.released)
    Edge: (event: button8_u_push) (guard: button8.released) (assignments: button8 := button8.pushed)
    Edge: (event: button8_u_release) (guard: button8.pushed) (assignments: button8 := button8.released)
    Edge: (event: gate_U_N_u_s1_on) (guard: gate_U_N_S.closed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.bclosed)
    Edge: (event: gate_U_N_u_s1_off) (guard: gate_U_N_S.bclosed and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.closed)
    Edge: (event: gate_U_N_u_s2_on) (guard: gate_U_N_S.bclosed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.fclosed)
    Edge: (event: gate_U_N_u_s2_off) (guard: gate_U_N_S.fclosed and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.bclosed)
    Edge: (event: gate_U_N_u_s3_on) (guard: gate_U_N_S.fclosed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.middle)
    Edge: (event: gate_U_N_u_s3_off) (guard: gate_U_N_S.middle and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.fclosed)
    Edge: (event: gate_U_N_u_s4_off) (guard: gate_U_N_S.middle and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.fopen)
    Edge: (event: gate_U_N_u_s4_on) (guard: gate_U_N_S.fopen and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.middle)
    Edge: (event: gate_U_N_u_s5_off) (guard: gate_U_N_S.fopen and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.bopen)
    Edge: (event: gate_U_N_u_s5_on) (guard: gate_U_N_S.bopen and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.fopen)
    Edge: (event: gate_U_N_u_s6_off) (guard: gate_U_N_S.bopen and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.open)
    Edge: (event: gate_U_N_u_s6_on) (guard: gate_U_N_S.open and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.bopen)
    Edge: (event: gate_U_N_c_open) (guard: gate_U_N_Dir.off -> button7.pushed and button8.released and ((gate_U_N_S.closed or gate_U_N_S.fopen) and (gate_U_N_Dir.off and s_equal_U.on)) or (button7.pushed and button8.released and (gate_U_N_S.fclosed and (gate_U_N_Dir.off and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and (gate_U_N_Dir.off and s_equal_U.on)))) (assignments: gate_U_N_Dir := gate_U_N_Dir.opening)
    Edge: (event: gate_U_N_c_open) (guard: gate_U_N_Dir.closing -> button7.pushed and button8.released and ((gate_U_N_S.closed or gate_U_N_S.fopen) and (gate_U_N_Dir.closing and s_equal_U.on)) or (button7.pushed and button8.released and (gate_U_N_S.fclosed and (gate_U_N_Dir.closing and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and (gate_U_N_Dir.closing and s_equal_U.on)))) (assignments: gate_U_N_Dir := gate_U_N_Dir.opening)
    Edge: (event: gate_U_N_c_close) (guard: gate_U_N_Dir.off -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.off) or (button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.off) or button8.pushed and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and gate_U_N_Dir.off))) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing)
    Edge: (event: gate_U_N_c_close) (guard: gate_U_N_Dir.opening -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.opening) or (button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.opening) or button8.pushed and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and gate_U_N_Dir.opening))) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing)
    Edge: (event: gate_U_N_c_stop) (guard: gate_U_N_Dir.opening) (assignments: gate_U_N_Dir := gate_U_N_Dir.off)
    Edge: (event: gate_U_N_c_stop) (guard: gate_U_N_Dir.closing) (assignments: gate_U_N_Dir := gate_U_N_Dir.off)
    Edge: (event: s_equal_U_u_equal_on) (guard: s_equal_U.off) (assignments: s_equal_U := s_equal_U.on)
    Edge: (event: s_equal_U_u_equal_off) (guard: s_equal_U.on) (assignments: s_equal_U := s_equal_U.off)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: button7.released and button8.released and (gate_U_N_S.closed and gate_U_N_Dir.off) [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: button7.released and button8.released and (gate_U_N_S.closed and gate_U_N_Dir.off) -> button8.released and (gate_U_N_S.closed and gate_U_N_Dir.off) [backward reach with edge: (event: button7_u_release) (guard: button7.pushed) (assignments: button7 := button7.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: button8.released and (gate_U_N_S.closed and gate_U_N_Dir.off) -> gate_U_N_S.closed and gate_U_N_Dir.off [backward reach with edge: (event: button8_u_release) (guard: button8.pushed) (assignments: button8 := button8.released), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_N_S.closed and gate_U_N_Dir.off -> gate_U_N_S.closed and not gate_U_N_Dir.closing [backward reach with edge: (event: gate_U_N_c_stop) (guard: gate_U_N_Dir.opening) (assignments: gate_U_N_Dir := gate_U_N_Dir.off), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.closing -> gate_U_N_S.closed and not gate_U_N_Dir.opening or gate_U_N_S.closed and gate_U_N_Dir.opening [backward reach with edge: (event: gate_U_N_c_stop) (guard: gate_U_N_Dir.closing) (assignments: gate_U_N_Dir := gate_U_N_Dir.off), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 2.
Backward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.opening or gate_U_N_S.closed and gate_U_N_Dir.opening -> gate_U_N_S.closed and not gate_U_N_Dir.opening or (gate_U_N_S.closed and gate_U_N_Dir.opening or gate_U_N_S.bclosed and gate_U_N_Dir.closing) [backward reach with edge: (event: gate_U_N_u_s1_off) (guard: gate_U_N_S.bclosed and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.closed), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.opening or (gate_U_N_S.closed and gate_U_N_Dir.opening or gate_U_N_S.bclosed and gate_U_N_Dir.closing) -> gate_U_N_S.closed and not gate_U_N_Dir.opening or gate_U_N_S.closed and gate_U_N_Dir.opening or (gate_U_N_S.fclosed and gate_U_N_Dir.closing or gate_U_N_S.bclosed and gate_U_N_Dir.closing) [backward reach with edge: (event: gate_U_N_u_s2_off) (guard: gate_U_N_S.fclosed and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.bclosed), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.opening or gate_U_N_S.closed and gate_U_N_Dir.opening or (gate_U_N_S.fclosed and gate_U_N_Dir.closing or gate_U_N_S.bclosed and gate_U_N_Dir.closing) -> gate_U_N_S.closed and not gate_U_N_Dir.opening or gate_U_N_S.closed and gate_U_N_Dir.opening or (gate_U_N_S.fclosed and gate_U_N_Dir.closing or (gate_U_N_S.bclosed or gate_U_N_S.middle) and gate_U_N_Dir.closing) [backward reach with edge: (event: gate_U_N_u_s3_off) (guard: gate_U_N_S.middle and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.fclosed), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.opening or gate_U_N_S.closed and gate_U_N_Dir.opening or (gate_U_N_S.fclosed and gate_U_N_Dir.closing or (gate_U_N_S.bclosed or gate_U_N_S.middle) and gate_U_N_Dir.closing) -> gate_U_N_S.closed and not gate_U_N_Dir.opening or gate_U_N_S.closed and gate_U_N_Dir.opening or (gate_U_N_S.fopen and gate_U_N_Dir.closing or (gate_U_N_S.fclosed and gate_U_N_Dir.closing or (gate_U_N_S.bclosed or gate_U_N_S.middle) and gate_U_N_Dir.closing)) [backward reach with edge: (event: gate_U_N_u_s4_on) (guard: gate_U_N_S.fopen and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.middle), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.opening or gate_U_N_S.closed and gate_U_N_Dir.opening or (gate_U_N_S.fopen and gate_U_N_Dir.closing or (gate_U_N_S.fclosed and gate_U_N_Dir.closing or (gate_U_N_S.bclosed or gate_U_N_S.middle) and gate_U_N_Dir.closing)) -> gate_U_N_S.closed and not gate_U_N_Dir.opening or (gate_U_N_S.closed and gate_U_N_Dir.opening or gate_U_N_S.fopen and gate_U_N_Dir.closing) or (gate_U_N_S.fclosed and gate_U_N_Dir.closing or ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.closing or gate_U_N_S.middle and gate_U_N_Dir.closing)) [backward reach with edge: (event: gate_U_N_u_s5_on) (guard: gate_U_N_S.bopen and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.fopen), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.opening or (gate_U_N_S.closed and gate_U_N_Dir.opening or gate_U_N_S.fopen and gate_U_N_Dir.closing) or (gate_U_N_S.fclosed and gate_U_N_Dir.closing or ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.closing or gate_U_N_S.middle and gate_U_N_Dir.closing)) -> gate_U_N_S.closed and not gate_U_N_Dir.opening or (gate_U_N_S.closed and gate_U_N_Dir.opening or gate_U_N_S.fopen and gate_U_N_Dir.closing) or ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.closing or ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.closing or gate_U_N_S.middle and gate_U_N_Dir.closing)) [backward reach with edge: (event: gate_U_N_u_s6_on) (guard: gate_U_N_S.open and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.bopen), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.opening or (gate_U_N_S.closed and gate_U_N_Dir.opening or gate_U_N_S.fopen and gate_U_N_Dir.closing) or ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.closing or ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.closing or gate_U_N_S.middle and gate_U_N_Dir.closing)) -> <bdd 16n 12p> [backward reach with edge: (event: gate_U_N_c_close) (guard: gate_U_N_Dir.off -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.off) or (button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.off) or button8.pushed and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and gate_U_N_Dir.off))) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing), restricted to current/previous controlled-behavior predicate: true]
Backward controlled-behavior: <bdd 16n 12p> -> <bdd 13n 12p> [backward reach with edge: (event: gate_U_N_c_close) (guard: gate_U_N_Dir.opening -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.opening) or (button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.opening) or button8.pushed and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and gate_U_N_Dir.opening))) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 3.
Backward controlled-behavior: <bdd 13n 12p> -> true [backward reach with edge: (event: button8_u_push) (guard: button8.released) (assignments: button8 := button8.pushed), restricted to current/previous controlled-behavior predicate: true]
Backward reachability: iteration 4.
Backward controlled-behavior: true [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: false [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: button7.released and button8.released and (gate_U_N_S.closed and (gate_U_N_Dir.off and s_equal_U.off)) [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: button7.released and button8.released and (gate_U_N_S.closed and (gate_U_N_Dir.off and s_equal_U.off)) -> button8.released and gate_U_N_S.closed and (gate_U_N_Dir.off and s_equal_U.off) [forward reach with edge: (event: button7_u_push) (guard: button7.released) (assignments: button7 := button7.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: button8.released and gate_U_N_S.closed and (gate_U_N_Dir.off and s_equal_U.off) -> gate_U_N_S.closed and (gate_U_N_Dir.off and s_equal_U.off) [forward reach with edge: (event: button8_u_push) (guard: button8.released) (assignments: button8 := button8.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_N_S.closed and (gate_U_N_Dir.off and s_equal_U.off) -> gate_U_N_S.closed and gate_U_N_Dir.off [forward reach with edge: (event: s_equal_U_u_equal_on) (guard: s_equal_U.off) (assignments: s_equal_U := s_equal_U.on), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 2.
Forward controlled-behavior: gate_U_N_S.closed and gate_U_N_Dir.off -> <bdd 13n 4p> [forward reach with edge: (event: gate_U_N_c_open) (guard: gate_U_N_Dir.off -> button7.pushed and button8.released and ((gate_U_N_S.closed or gate_U_N_S.fopen) and (gate_U_N_Dir.off and s_equal_U.on)) or (button7.pushed and button8.released and (gate_U_N_S.fclosed and (gate_U_N_Dir.off and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and (gate_U_N_Dir.off and s_equal_U.on)))) (assignments: gate_U_N_Dir := gate_U_N_Dir.opening), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: <bdd 13n 4p> -> button7.released and (gate_U_N_S.closed and gate_U_N_Dir.off) or (button7.pushed and button8.released and (gate_U_N_S.closed and not gate_U_N_Dir.closing) or button7.pushed and button8.pushed and (gate_U_N_S.closed and gate_U_N_Dir.off)) [forward reach with edge: (event: s_equal_U_u_equal_off) (guard: s_equal_U.on) (assignments: s_equal_U := s_equal_U.off), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 3.
Forward controlled-behavior: button7.released and (gate_U_N_S.closed and gate_U_N_Dir.off) or (button7.pushed and button8.released and (gate_U_N_S.closed and not gate_U_N_Dir.closing) or button7.pushed and button8.pushed and (gate_U_N_S.closed and gate_U_N_Dir.off)) -> button8.released and (gate_U_N_S.closed and not gate_U_N_Dir.closing) or button8.pushed and (gate_U_N_S.closed and gate_U_N_Dir.off) [forward reach with edge: (event: button7_u_release) (guard: button7.pushed) (assignments: button7 := button7.released), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: button8.released and (gate_U_N_S.closed and not gate_U_N_Dir.closing) or button8.pushed and (gate_U_N_S.closed and gate_U_N_Dir.off) -> gate_U_N_S.closed and not gate_U_N_Dir.closing [forward reach with edge: (event: button8_u_push) (guard: button8.released) (assignments: button8 := button8.pushed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.closing -> gate_U_N_S.closed and not gate_U_N_Dir.closing or gate_U_N_S.bclosed and gate_U_N_Dir.opening [forward reach with edge: (event: gate_U_N_u_s1_on) (guard: gate_U_N_S.closed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.bclosed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.closing or gate_U_N_S.bclosed and gate_U_N_Dir.opening -> gate_U_N_S.closed and not gate_U_N_Dir.closing or (gate_U_N_S.fclosed and gate_U_N_Dir.opening or gate_U_N_S.bclosed and gate_U_N_Dir.opening) [forward reach with edge: (event: gate_U_N_u_s2_on) (guard: gate_U_N_S.bclosed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.fclosed), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.closing or (gate_U_N_S.fclosed and gate_U_N_Dir.opening or gate_U_N_S.bclosed and gate_U_N_Dir.opening) -> gate_U_N_S.closed and not gate_U_N_Dir.closing or (gate_U_N_S.fclosed and gate_U_N_Dir.opening or (gate_U_N_S.bclosed or gate_U_N_S.middle) and gate_U_N_Dir.opening) [forward reach with edge: (event: gate_U_N_u_s3_on) (guard: gate_U_N_S.fclosed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.middle), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.closing or (gate_U_N_S.fclosed and gate_U_N_Dir.opening or (gate_U_N_S.bclosed or gate_U_N_S.middle) and gate_U_N_Dir.opening) -> gate_U_N_S.closed and not gate_U_N_Dir.closing or gate_U_N_S.fopen and gate_U_N_Dir.opening or (gate_U_N_S.fclosed and gate_U_N_Dir.opening or (gate_U_N_S.bclosed or gate_U_N_S.middle) and gate_U_N_Dir.opening) [forward reach with edge: (event: gate_U_N_u_s4_off) (guard: gate_U_N_S.middle and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.fopen), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.closing or gate_U_N_S.fopen and gate_U_N_Dir.opening or (gate_U_N_S.fclosed and gate_U_N_Dir.opening or (gate_U_N_S.bclosed or gate_U_N_S.middle) and gate_U_N_Dir.opening) -> gate_U_N_S.closed and not gate_U_N_Dir.closing or gate_U_N_S.fopen and gate_U_N_Dir.opening or (gate_U_N_S.fclosed and gate_U_N_Dir.opening or ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.opening or gate_U_N_S.middle and gate_U_N_Dir.opening)) [forward reach with edge: (event: gate_U_N_u_s5_off) (guard: gate_U_N_S.fopen and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.bopen), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.closing or gate_U_N_S.fopen and gate_U_N_Dir.opening or (gate_U_N_S.fclosed and gate_U_N_Dir.opening or ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.opening or gate_U_N_S.middle and gate_U_N_Dir.opening)) -> gate_U_N_S.closed and not gate_U_N_Dir.closing or gate_U_N_S.fopen and gate_U_N_Dir.opening or ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.opening or ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.opening or gate_U_N_S.middle and gate_U_N_Dir.opening)) [forward reach with edge: (event: gate_U_N_u_s6_off) (guard: gate_U_N_S.bopen and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.open), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: gate_U_N_S.closed and not gate_U_N_Dir.closing or gate_U_N_S.fopen and gate_U_N_Dir.opening or ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.opening or ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.opening or gate_U_N_S.middle and gate_U_N_Dir.opening)) -> <bdd 15n 14p> [forward reach with edge: (event: gate_U_N_c_close) (guard: gate_U_N_Dir.opening -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.opening) or (button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.opening) or button8.pushed and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and gate_U_N_Dir.opening))) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: <bdd 15n 14p> -> <bdd 11n 12p> [forward reach with edge: (event: gate_U_N_c_stop) (guard: gate_U_N_Dir.opening) (assignments: gate_U_N_Dir := gate_U_N_Dir.off), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 4.
Forward controlled-behavior: <bdd 11n 12p> -> not gate_U_N_S.closed or not gate_U_N_Dir.closing [forward reach with edge: (event: button8_u_release) (guard: button8.pushed) (assignments: button8 := button8.released), restricted to current/previous controlled-behavior predicate: true]
Forward controlled-behavior: not gate_U_N_S.closed or not gate_U_N_Dir.closing -> true [forward reach with edge: (event: gate_U_N_u_s1_off) (guard: gate_U_N_S.bclosed and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.closed), restricted to current/previous controlled-behavior predicate: true]
Forward reachability: iteration 5.
Forward controlled-behavior: true [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: gate_U_N_c_open) (guard: gate_U_N_Dir.off -> button7.pushed and button8.released and ((gate_U_N_S.closed or gate_U_N_S.fopen) and (gate_U_N_Dir.off and s_equal_U.on)) or (button7.pushed and button8.released and (gate_U_N_S.fclosed and (gate_U_N_Dir.off and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and (gate_U_N_Dir.off and s_equal_U.on)))) (assignments: gate_U_N_Dir := gate_U_N_Dir.opening): guard: button7.pushed and button8.released and ((gate_U_N_S.closed or gate_U_N_S.fopen) and (gate_U_N_Dir.off and s_equal_U.on)) or (button7.pushed and button8.released and (gate_U_N_S.fclosed and (gate_U_N_Dir.off and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and (gate_U_N_Dir.off and s_equal_U.on))) -> button7.pushed and (button8.released and not gate_U_N_S.fclosed) and (not gate_U_N_S.middle and not gate_U_N_S.open and (gate_U_N_Dir.off and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.fclosed or gate_U_N_S.middle) and (gate_U_N_Dir.off and s_equal_U.on)).
Edge (event: gate_U_N_c_open) (guard: gate_U_N_Dir.closing -> button7.pushed and button8.released and ((gate_U_N_S.closed or gate_U_N_S.fopen) and (gate_U_N_Dir.closing and s_equal_U.on)) or (button7.pushed and button8.released and (gate_U_N_S.fclosed and (gate_U_N_Dir.closing and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and (gate_U_N_Dir.closing and s_equal_U.on)))) (assignments: gate_U_N_Dir := gate_U_N_Dir.opening): guard: button7.pushed and button8.released and ((gate_U_N_S.closed or gate_U_N_S.fopen) and (gate_U_N_Dir.closing and s_equal_U.on)) or (button7.pushed and button8.released and (gate_U_N_S.fclosed and (gate_U_N_Dir.closing and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and (gate_U_N_Dir.closing and s_equal_U.on))) -> button7.pushed and (button8.released and not gate_U_N_S.fclosed) and (not gate_U_N_S.middle and not gate_U_N_S.open and (gate_U_N_Dir.closing and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.fclosed or gate_U_N_S.middle) and (gate_U_N_Dir.closing and s_equal_U.on)).
Edge (event: gate_U_N_c_close) (guard: gate_U_N_Dir.off -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.off) or (button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.off) or button8.pushed and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and gate_U_N_Dir.off))) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing): guard: button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.off) or (button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.off) or button8.pushed and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and gate_U_N_Dir.off)) -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.off) or button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.off) or (button8.pushed and ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.off) or button8.pushed and (gate_U_N_S.middle and gate_U_N_Dir.off)).
Edge (event: gate_U_N_c_close) (guard: gate_U_N_Dir.opening -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.opening) or (button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.opening) or button8.pushed and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and gate_U_N_Dir.opening))) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing): guard: button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.opening) or (button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.opening) or button8.pushed and ((gate_U_N_S.bclosed or (gate_U_N_S.middle or gate_U_N_S.bopen)) and gate_U_N_Dir.opening)) -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.opening) or button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.opening) or (button8.pushed and ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.opening) or button8.pushed and (gate_U_N_S.middle and gate_U_N_Dir.opening)).
Edge (event: gate_U_N_c_stop) (guard: gate_U_N_Dir.opening) (assignments: gate_U_N_Dir := gate_U_N_Dir.off): guard: gate_U_N_Dir.opening -> (gate_U_N_S.bclosed or gate_U_N_S.middle or (gate_U_N_S.bopen or gate_U_N_Dir.opening)) and ((not gate_U_N_S.bclosed and not gate_U_N_S.bopen or gate_U_N_Dir.opening) and (not gate_U_N_S.middle or gate_U_N_Dir.opening)).
Edge (event: gate_U_N_c_stop) (guard: gate_U_N_Dir.closing) (assignments: gate_U_N_Dir := gate_U_N_Dir.off): guard: gate_U_N_Dir.closing -> not gate_U_N_S.bclosed and not gate_U_N_S.middle and (not gate_U_N_S.bopen and gate_U_N_Dir.closing) or ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.closing or gate_U_N_S.middle and gate_U_N_Dir.closing).

Final synthesis result:
  State: (controlled-behavior: true)
    Edge: (event: button7_u_push) (guard: button7.released) (assignments: button7 := button7.pushed)
    Edge: (event: button7_u_release) (guard: button7.pushed) (assignments: button7 := button7.released)
    Edge: (event: button8_u_push) (guard: button8.released) (assignments: button8 := button8.pushed)
    Edge: (event: button8_u_release) (guard: button8.pushed) (assignments: button8 := button8.released)
    Edge: (event: gate_U_N_u_s1_on) (guard: gate_U_N_S.closed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.bclosed)
    Edge: (event: gate_U_N_u_s1_off) (guard: gate_U_N_S.bclosed and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.closed)
    Edge: (event: gate_U_N_u_s2_on) (guard: gate_U_N_S.bclosed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.fclosed)
    Edge: (event: gate_U_N_u_s2_off) (guard: gate_U_N_S.fclosed and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.bclosed)
    Edge: (event: gate_U_N_u_s3_on) (guard: gate_U_N_S.fclosed and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.middle)
    Edge: (event: gate_U_N_u_s3_off) (guard: gate_U_N_S.middle and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.fclosed)
    Edge: (event: gate_U_N_u_s4_off) (guard: gate_U_N_S.middle and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.fopen)
    Edge: (event: gate_U_N_u_s4_on) (guard: gate_U_N_S.fopen and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.middle)
    Edge: (event: gate_U_N_u_s5_off) (guard: gate_U_N_S.fopen and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.bopen)
    Edge: (event: gate_U_N_u_s5_on) (guard: gate_U_N_S.bopen and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.fopen)
    Edge: (event: gate_U_N_u_s6_off) (guard: gate_U_N_S.bopen and gate_U_N_Dir.opening) (assignments: gate_U_N_S := gate_U_N_S.open)
    Edge: (event: gate_U_N_u_s6_on) (guard: gate_U_N_S.open and gate_U_N_Dir.closing) (assignments: gate_U_N_S := gate_U_N_S.bopen)
    Edge: (event: gate_U_N_c_open) (guard: gate_U_N_Dir.off -> button7.pushed and (button8.released and not gate_U_N_S.fclosed) and (not gate_U_N_S.middle and not gate_U_N_S.open and (gate_U_N_Dir.off and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.fclosed or gate_U_N_S.middle) and (gate_U_N_Dir.off and s_equal_U.on))) (assignments: gate_U_N_Dir := gate_U_N_Dir.opening)
    Edge: (event: gate_U_N_c_open) (guard: gate_U_N_Dir.closing -> button7.pushed and (button8.released and not gate_U_N_S.fclosed) and (not gate_U_N_S.middle and not gate_U_N_S.open and (gate_U_N_Dir.closing and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.fclosed or gate_U_N_S.middle) and (gate_U_N_Dir.closing and s_equal_U.on))) (assignments: gate_U_N_Dir := gate_U_N_Dir.opening)
    Edge: (event: gate_U_N_c_close) (guard: gate_U_N_Dir.off -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.off) or button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.off) or (button8.pushed and ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.off) or button8.pushed and (gate_U_N_S.middle and gate_U_N_Dir.off))) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing)
    Edge: (event: gate_U_N_c_close) (guard: gate_U_N_Dir.opening -> button8.pushed and (gate_U_N_S.fopen and gate_U_N_Dir.opening) or button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and gate_U_N_Dir.opening) or (button8.pushed and ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.opening) or button8.pushed and (gate_U_N_S.middle and gate_U_N_Dir.opening))) (assignments: gate_U_N_Dir := gate_U_N_Dir.closing)
    Edge: (event: gate_U_N_c_stop) (guard: gate_U_N_Dir.opening -> (gate_U_N_S.bclosed or gate_U_N_S.middle or (gate_U_N_S.bopen or gate_U_N_Dir.opening)) and ((not gate_U_N_S.bclosed and not gate_U_N_S.bopen or gate_U_N_Dir.opening) and (not gate_U_N_S.middle or gate_U_N_Dir.opening))) (assignments: gate_U_N_Dir := gate_U_N_Dir.off)
    Edge: (event: gate_U_N_c_stop) (guard: gate_U_N_Dir.closing -> not gate_U_N_S.bclosed and not gate_U_N_S.middle and (not gate_U_N_S.bopen and gate_U_N_Dir.closing) or ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and gate_U_N_Dir.closing or gate_U_N_S.middle and gate_U_N_Dir.closing)) (assignments: gate_U_N_Dir := gate_U_N_Dir.off)
    Edge: (event: s_equal_U_u_equal_on) (guard: s_equal_U.off) (assignments: s_equal_U := s_equal_U.on)
    Edge: (event: s_equal_U_u_equal_off) (guard: s_equal_U.on) (assignments: s_equal_U := s_equal_U.off)

Controlled system:                     exactly 168 states.

Initial (synthesis result):            true
Initial (uncontrolled system):         button7.released and button8.released and (gate_U_N_S.closed and (gate_U_N_Dir.off and s_equal_U.off))
Initial (controlled system):           button7.released and button8.released and (gate_U_N_S.closed and (gate_U_N_Dir.off and s_equal_U.off))
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event gate_U_N_c_open: guard: button7.pushed and (button8.released and not gate_U_N_S.fclosed) and (not gate_U_N_S.middle and not gate_U_N_S.open and (not gate_U_N_Dir.opening and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.fclosed or gate_U_N_S.middle) and (not gate_U_N_Dir.opening and s_equal_U.on)) -> true [assume button7.pushed and (button8.released and not gate_U_N_S.fclosed) and (not gate_U_N_S.middle and not gate_U_N_S.open and (not gate_U_N_Dir.opening and s_equal_U.on)) or button7.pushed and button8.released and ((gate_U_N_S.fclosed or gate_U_N_S.middle) and (not gate_U_N_Dir.opening and s_equal_U.on))].
  Event gate_U_N_c_close: guard: button8.pushed and (gate_U_N_S.fopen and not gate_U_N_Dir.closing) or button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and not gate_U_N_Dir.closing) or (button8.pushed and ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and not gate_U_N_Dir.closing) or button8.pushed and (gate_U_N_S.middle and not gate_U_N_Dir.closing)) -> true [assume button8.pushed and (gate_U_N_S.fopen and not gate_U_N_Dir.closing) or button8.pushed and ((gate_U_N_S.fclosed or gate_U_N_S.open) and not gate_U_N_Dir.closing) or (button8.pushed and ((gate_U_N_S.bclosed or gate_U_N_S.bopen) and not gate_U_N_Dir.closing) or button8.pushed and (gate_U_N_S.middle and not gate_U_N_Dir.closing))].
  Event gate_U_N_c_stop: guard: (gate_U_N_S.bclosed or gate_U_N_S.middle or (gate_U_N_S.bopen or not gate_U_N_Dir.off)) and ((not gate_U_N_S.bclosed and not gate_U_N_S.bopen or not gate_U_N_Dir.off) and (not gate_U_N_S.middle or not gate_U_N_Dir.off)) -> true [assume (gate_U_N_S.bclosed or gate_U_N_S.middle or (gate_U_N_S.bopen or not gate_U_N_Dir.off)) and ((not gate_U_N_S.bclosed and not gate_U_N_S.bopen or not gate_U_N_Dir.off) and (not gate_U_N_S.middle or not gate_U_N_Dir.off))].

Constructing output CIF specification.
Writing output CIF file "generated_files_MLDES/subplant_35_sup.cif".
