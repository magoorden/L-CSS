Reading CIF file "generated_files_MLDES/subplant_2.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name          Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   button5       0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   button6       1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   gate_D_N_Dir  2      2 * 2     3 * 2       4 * 2       75%
  4      location pointer  n/a   gate_D_N_S    3      3 * 2     7 * 2       8 * 2       ~88%
  5      location pointer  n/a   gate_D_S_Dir  4      2 * 2     3 * 2       4 * 2       75%
  6      location pointer  n/a   gate_D_S_S    5      3 * 2     7 * 2       8 * 2       ~88%
  7      location pointer  n/a   s_equal_D     6      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  Total                                        7      26        52          60          ~87%

Applying automatic variable ordering:
  Number of hyperedges: 42

  Applying FORCE algorithm:
    Maximum number of iterations: 20

    Total span:                   38 (total)                 0.90 (avg/edge) [before]
    Total span:                   34 (total)                 0.81 (avg/edge) [iteration 1]
    Total span:                   34 (total)                 0.81 (avg/edge) [iteration 2]
    Total span:                   34 (total)                 0.81 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                   34 (total)                 0.81 (avg/edge) [before]
    Total span:                   31 (total)                 0.74 (avg/edge) [window 0..3]
    Total span:                   31 (total)                 0.74 (avg/edge) [after]

  Variable order changed.

CIF variables and location pointers:
  Nr     Kind              Type  Name          Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   gate_D_N_Dir  0      2 * 2     3 * 2       4 * 2       75%
  2      location pointer  n/a   gate_D_N_S    1      3 * 2     7 * 2       8 * 2       ~88%
  3      location pointer  n/a   button6       2      1 * 2     2 * 2       2 * 2       100%
  4      location pointer  n/a   button5       3      1 * 2     2 * 2       2 * 2       100%
  5      location pointer  n/a   gate_D_S_S    4      3 * 2     7 * 2       8 * 2       ~88%
  6      location pointer  n/a   gate_D_S_Dir  5      2 * 2     3 * 2       4 * 2       75%
  7      location pointer  n/a   s_equal_D     6      1 * 2     2 * 2       2 * 2       100%
  -----  ----------------  ----  ------------  -----  --------  ----------  ----------  -----------
  Total                                        7      26        52          60          ~87%

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     button5.released
Initial   (aut/locs init predicate):     button6.released
Initial   (aut/locs init predicate):     gate_D_N_S.closed
Initial   (aut/locs init predicate):     gate_D_N_Dir.off
Initial   (aut/locs init predicate):     gate_D_S_S.closed
Initial   (aut/locs init predicate):     gate_D_S_Dir.off
Initial   (aut/locs init predicate):     s_equal_D.on
Initial   (auts/locs init predicate):    <bdd 13n 1p>
Initial   (uncontrolled system):         <bdd 13n 1p>
Initial   (system, combined init/inv):   <bdd 13n 1p>

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   button5.released
Marked    (aut/locs marker predicate):   button6.released
Marked    (aut/locs marker predicate):   gate_D_N_S.closed
Marked    (aut/locs marker predicate):   gate_D_N_Dir.off
Marked    (aut/locs marker predicate):   gate_D_S_S.closed
Marked    (aut/locs marker predicate):   gate_D_S_Dir.off
Marked    (aut/locs marker predicate):   true
Marked    (auts/locs marker predicate):  <bdd 12n 1p>
Marked    (uncontrolled system):         <bdd 12n 1p>
Marked    (system, combined marked/inv): <bdd 12n 1p>

State/event exclusion requirements:
  Event "gate_D_N_c_open" needs:
    s_equal_D.on
    (gate_D_N_S.closed or gate_D_N_S.fopen) and (button6.released and button5.pushed) or (gate_D_N_S.fclosed and (button6.released and button5.pushed) or (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and (button6.released and button5.pushed))
  Event "gate_D_S_c_open" needs:
    s_equal_D.on
    (button6.pushed or button5.pushed) and ((button6.pushed or (button5.released or not gate_D_S_S.open)) and button6.released)
  Event "gate_D_N_c_close" needs:
    gate_D_N_S.fopen and button6.pushed or ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed or (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed)
  Event "gate_D_S_c_close" needs:
    button6.pushed and (button6.released or not gate_D_S_S.closed)

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: button5_u_push) (guard: button5.released) (assignments: button5 := button5.pushed)
    Edge: (event: button5_u_release) (guard: button5.pushed) (assignments: button5 := button5.released)
    Edge: (event: button6_u_push) (guard: button6.released) (assignments: button6 := button6.pushed)
    Edge: (event: button6_u_release) (guard: button6.pushed) (assignments: button6 := button6.released)
    Edge: (event: gate_D_N_u_s1_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.closed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s1_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.closed)
    Edge: (event: gate_D_N_u_s2_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s2_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s3_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s3_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s4_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s4_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s5_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_u_s5_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s6_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.open)
    Edge: (event: gate_D_N_u_s6_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.open) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.closing) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.closing) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)
    Edge: (event: gate_D_S_u_s1_on) (guard: gate_D_S_S.closed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.bclosed)
    Edge: (event: gate_D_S_u_s1_off) (guard: gate_D_S_S.bclosed and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.closed)
    Edge: (event: gate_D_S_u_s2_on) (guard: gate_D_S_S.bclosed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.fclosed)
    Edge: (event: gate_D_S_u_s2_off) (guard: gate_D_S_S.fclosed and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.bclosed)
    Edge: (event: gate_D_S_u_s3_on) (guard: gate_D_S_S.fclosed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.middle)
    Edge: (event: gate_D_S_u_s3_off) (guard: gate_D_S_S.middle and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.fclosed)
    Edge: (event: gate_D_S_u_s4_off) (guard: gate_D_S_S.middle and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.fopen)
    Edge: (event: gate_D_S_u_s4_on) (guard: gate_D_S_S.fopen and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.middle)
    Edge: (event: gate_D_S_u_s5_off) (guard: gate_D_S_S.fopen and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.bopen)
    Edge: (event: gate_D_S_u_s5_on) (guard: gate_D_S_S.bopen and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.fopen)
    Edge: (event: gate_D_S_u_s6_off) (guard: gate_D_S_S.bopen and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.open)
    Edge: (event: gate_D_S_u_s6_on) (guard: gate_D_S_S.open and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.bopen)
    Edge: (event: gate_D_S_c_open) (guard: gate_D_S_Dir.off) (assignments: gate_D_S_Dir := gate_D_S_Dir.opening)
    Edge: (event: gate_D_S_c_open) (guard: gate_D_S_Dir.closing) (assignments: gate_D_S_Dir := gate_D_S_Dir.opening)
    Edge: (event: gate_D_S_c_close) (guard: gate_D_S_Dir.off) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing)
    Edge: (event: gate_D_S_c_close) (guard: gate_D_S_Dir.opening) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing)
    Edge: (event: gate_D_S_c_stop) (guard: gate_D_S_Dir.opening) (assignments: gate_D_S_Dir := gate_D_S_Dir.off)
    Edge: (event: gate_D_S_c_stop) (guard: gate_D_S_Dir.closing) (assignments: gate_D_S_Dir := gate_D_S_Dir.off)
    Edge: (event: s_equal_D_u_equal_on) (guard: s_equal_D.off) (assignments: s_equal_D := s_equal_D.on)
    Edge: (event: s_equal_D_u_equal_off) (guard: s_equal_D.on) (assignments: s_equal_D := s_equal_D.off)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "gate_D_N_Dir" (group: 0, domain: 0+1, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "gate_D_N_S" (group: 1, domain: 2+3, BDD variables: 3, CIF/BDD values: 7/8)].
Controlled behavior: true -> <bdd 8n 18p> [range: true, variable: location pointer for automaton "gate_D_S_S" (group: 4, domain: 8+9, BDD variables: 3, CIF/BDD values: 7/8)].
Controlled behavior: <bdd 8n 18p> -> <bdd 10n 36p> [range: true, variable: location pointer for automaton "gate_D_S_Dir" (group: 5, domain: 10+11, BDD variables: 2, CIF/BDD values: 3/4)].

Extended controlled-behavior predicate using variable ranges: <bdd 10n 36p>.

Restricting behavior using state/event exclusion requirements.

Edge (event: gate_D_N_c_open) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening): guard: gate_D_N_Dir.off -> gate_D_N_Dir.off and (gate_D_N_S.closed or gate_D_N_S.fopen) and (button6.released and (button5.pushed and s_equal_D.on)) or (gate_D_N_Dir.off and gate_D_N_S.fclosed and (button6.released and (button5.pushed and s_equal_D.on)) or gate_D_N_Dir.off and (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and (button6.released and (button5.pushed and s_equal_D.on))) [requirement: (gate_D_N_S.closed or gate_D_N_S.fopen) and button6.released and (button5.pushed and s_equal_D.on) or (gate_D_N_S.fclosed and button6.released and (button5.pushed and s_equal_D.on) or (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.released and (button5.pushed and s_equal_D.on))].
Edge (event: gate_D_N_c_open) (guard: gate_D_N_Dir.closing) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening): guard: gate_D_N_Dir.closing -> gate_D_N_Dir.closing and (gate_D_N_S.closed or gate_D_N_S.fopen) and (button6.released and (button5.pushed and s_equal_D.on)) or (gate_D_N_Dir.closing and gate_D_N_S.fclosed and (button6.released and (button5.pushed and s_equal_D.on)) or gate_D_N_Dir.closing and (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and (button6.released and (button5.pushed and s_equal_D.on))) [requirement: (gate_D_N_S.closed or gate_D_N_S.fopen) and button6.released and (button5.pushed and s_equal_D.on) or (gate_D_N_S.fclosed and button6.released and (button5.pushed and s_equal_D.on) or (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.released and (button5.pushed and s_equal_D.on))].
Edge (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing): guard: gate_D_N_Dir.off -> gate_D_N_Dir.off and (gate_D_N_S.fopen and button6.pushed) or (gate_D_N_Dir.off and ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed) or gate_D_N_Dir.off and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed)) [requirement: gate_D_N_S.fopen and button6.pushed or ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed or (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed)].
Edge (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing): guard: gate_D_N_Dir.opening -> gate_D_N_Dir.opening and (gate_D_N_S.fopen and button6.pushed) or (gate_D_N_Dir.opening and ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed) or gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed)) [requirement: gate_D_N_S.fopen and button6.pushed or ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed or (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed)].
Edge (event: gate_D_S_c_open) (guard: gate_D_S_Dir.off) (assignments: gate_D_S_Dir := gate_D_S_Dir.opening): guard: gate_D_S_Dir.off -> button6.released and button5.pushed and ((gate_D_S_S.closed or gate_D_S_S.fopen) and (gate_D_S_Dir.off and s_equal_D.on)) or (button6.released and button5.pushed and (gate_D_S_S.fclosed and (gate_D_S_Dir.off and s_equal_D.on)) or button6.released and button5.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and (gate_D_S_Dir.off and s_equal_D.on))) [requirement: button6.released and button5.pushed and ((gate_D_S_S.closed or gate_D_S_S.fopen) and s_equal_D.on) or (button6.released and button5.pushed and (gate_D_S_S.fclosed and s_equal_D.on) or button6.released and button5.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and s_equal_D.on))].
Edge (event: gate_D_S_c_open) (guard: gate_D_S_Dir.closing) (assignments: gate_D_S_Dir := gate_D_S_Dir.opening): guard: gate_D_S_Dir.closing -> button6.released and button5.pushed and ((gate_D_S_S.closed or gate_D_S_S.fopen) and (gate_D_S_Dir.closing and s_equal_D.on)) or (button6.released and button5.pushed and (gate_D_S_S.fclosed and (gate_D_S_Dir.closing and s_equal_D.on)) or button6.released and button5.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and (gate_D_S_Dir.closing and s_equal_D.on))) [requirement: button6.released and button5.pushed and ((gate_D_S_S.closed or gate_D_S_S.fopen) and s_equal_D.on) or (button6.released and button5.pushed and (gate_D_S_S.fclosed and s_equal_D.on) or button6.released and button5.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and s_equal_D.on))].
Edge (event: gate_D_S_c_close) (guard: gate_D_S_Dir.off) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing): guard: gate_D_S_Dir.off -> button6.pushed and (gate_D_S_S.fopen and gate_D_S_Dir.off) or (button6.pushed and ((gate_D_S_S.fclosed or gate_D_S_S.open) and gate_D_S_Dir.off) or button6.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and gate_D_S_Dir.off)) [requirement: button6.pushed and (button6.released or not gate_D_S_S.closed)].
Edge (event: gate_D_S_c_close) (guard: gate_D_S_Dir.opening) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing): guard: gate_D_S_Dir.opening -> button6.pushed and (gate_D_S_S.fopen and gate_D_S_Dir.opening) or (button6.pushed and ((gate_D_S_S.fclosed or gate_D_S_S.open) and gate_D_S_Dir.opening) or button6.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and gate_D_S_Dir.opening)) [requirement: button6.pushed and (button6.released or not gate_D_S_S.closed)].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: <bdd 10n 36p>)
    Edge: (event: button5_u_push) (guard: button5.released) (assignments: button5 := button5.pushed)
    Edge: (event: button5_u_release) (guard: button5.pushed) (assignments: button5 := button5.released)
    Edge: (event: button6_u_push) (guard: button6.released) (assignments: button6 := button6.pushed)
    Edge: (event: button6_u_release) (guard: button6.pushed) (assignments: button6 := button6.released)
    Edge: (event: gate_D_N_u_s1_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.closed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s1_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.closed)
    Edge: (event: gate_D_N_u_s2_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s2_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s3_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s3_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s4_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s4_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s5_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_u_s5_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s6_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.open)
    Edge: (event: gate_D_N_u_s6_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.open) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.off -> gate_D_N_Dir.off and (gate_D_N_S.closed or gate_D_N_S.fopen) and (button6.released and (button5.pushed and s_equal_D.on)) or (gate_D_N_Dir.off and gate_D_N_S.fclosed and (button6.released and (button5.pushed and s_equal_D.on)) or gate_D_N_Dir.off and (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and (button6.released and (button5.pushed and s_equal_D.on)))) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.closing -> gate_D_N_Dir.closing and (gate_D_N_S.closed or gate_D_N_S.fopen) and (button6.released and (button5.pushed and s_equal_D.on)) or (gate_D_N_Dir.closing and gate_D_N_S.fclosed and (button6.released and (button5.pushed and s_equal_D.on)) or gate_D_N_Dir.closing and (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and (button6.released and (button5.pushed and s_equal_D.on)))) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off -> gate_D_N_Dir.off and (gate_D_N_S.fopen and button6.pushed) or (gate_D_N_Dir.off and ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed) or gate_D_N_Dir.off and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed))) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening -> gate_D_N_Dir.opening and (gate_D_N_S.fopen and button6.pushed) or (gate_D_N_Dir.opening and ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed) or gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed))) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.closing) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)
    Edge: (event: gate_D_S_u_s1_on) (guard: gate_D_S_S.closed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.bclosed)
    Edge: (event: gate_D_S_u_s1_off) (guard: gate_D_S_S.bclosed and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.closed)
    Edge: (event: gate_D_S_u_s2_on) (guard: gate_D_S_S.bclosed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.fclosed)
    Edge: (event: gate_D_S_u_s2_off) (guard: gate_D_S_S.fclosed and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.bclosed)
    Edge: (event: gate_D_S_u_s3_on) (guard: gate_D_S_S.fclosed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.middle)
    Edge: (event: gate_D_S_u_s3_off) (guard: gate_D_S_S.middle and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.fclosed)
    Edge: (event: gate_D_S_u_s4_off) (guard: gate_D_S_S.middle and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.fopen)
    Edge: (event: gate_D_S_u_s4_on) (guard: gate_D_S_S.fopen and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.middle)
    Edge: (event: gate_D_S_u_s5_off) (guard: gate_D_S_S.fopen and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.bopen)
    Edge: (event: gate_D_S_u_s5_on) (guard: gate_D_S_S.bopen and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.fopen)
    Edge: (event: gate_D_S_u_s6_off) (guard: gate_D_S_S.bopen and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.open)
    Edge: (event: gate_D_S_u_s6_on) (guard: gate_D_S_S.open and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.bopen)
    Edge: (event: gate_D_S_c_open) (guard: gate_D_S_Dir.off -> button6.released and button5.pushed and ((gate_D_S_S.closed or gate_D_S_S.fopen) and (gate_D_S_Dir.off and s_equal_D.on)) or (button6.released and button5.pushed and (gate_D_S_S.fclosed and (gate_D_S_Dir.off and s_equal_D.on)) or button6.released and button5.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and (gate_D_S_Dir.off and s_equal_D.on)))) (assignments: gate_D_S_Dir := gate_D_S_Dir.opening)
    Edge: (event: gate_D_S_c_open) (guard: gate_D_S_Dir.closing -> button6.released and button5.pushed and ((gate_D_S_S.closed or gate_D_S_S.fopen) and (gate_D_S_Dir.closing and s_equal_D.on)) or (button6.released and button5.pushed and (gate_D_S_S.fclosed and (gate_D_S_Dir.closing and s_equal_D.on)) or button6.released and button5.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and (gate_D_S_Dir.closing and s_equal_D.on)))) (assignments: gate_D_S_Dir := gate_D_S_Dir.opening)
    Edge: (event: gate_D_S_c_close) (guard: gate_D_S_Dir.off -> button6.pushed and (gate_D_S_S.fopen and gate_D_S_Dir.off) or (button6.pushed and ((gate_D_S_S.fclosed or gate_D_S_S.open) and gate_D_S_Dir.off) or button6.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and gate_D_S_Dir.off))) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing)
    Edge: (event: gate_D_S_c_close) (guard: gate_D_S_Dir.opening -> button6.pushed and (gate_D_S_S.fopen and gate_D_S_Dir.opening) or (button6.pushed and ((gate_D_S_S.fclosed or gate_D_S_S.open) and gate_D_S_Dir.opening) or button6.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and gate_D_S_Dir.opening))) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing)
    Edge: (event: gate_D_S_c_stop) (guard: gate_D_S_Dir.opening) (assignments: gate_D_S_Dir := gate_D_S_Dir.off)
    Edge: (event: gate_D_S_c_stop) (guard: gate_D_S_Dir.closing) (assignments: gate_D_S_Dir := gate_D_S_Dir.off)
    Edge: (event: s_equal_D_u_equal_on) (guard: s_equal_D.off) (assignments: s_equal_D := s_equal_D.on)
    Edge: (event: s_equal_D_u_equal_off) (guard: s_equal_D.on) (assignments: s_equal_D := s_equal_D.off)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 12n 1p> [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 12n 1p> -> <bdd 11n 1p> [backward reach with edge: (event: button5_u_release) (guard: button5.pushed) (assignments: button5 := button5.released), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 11n 1p> -> gate_D_N_Dir.off and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.off) [backward reach with edge: (event: button6_u_release) (guard: button6.pushed) (assignments: button6 := button6.released), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: gate_D_N_Dir.off and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.off) -> not gate_D_N_Dir.closing and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.off) [backward reach with edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.off), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: not gate_D_N_Dir.closing and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.off) -> not gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.off) or gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.off) [backward reach with edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.closing) (assignments: gate_D_N_Dir := gate_D_N_Dir.off), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: not gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.off) or gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.off) -> not gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.closing) or gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.closing) [backward reach with edge: (event: gate_D_S_c_stop) (guard: gate_D_S_Dir.opening) (assignments: gate_D_S_Dir := gate_D_S_Dir.off), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: not gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.closing) or gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.closing) -> not gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.opening) or not gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.opening) or (gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.opening) or gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.opening)) [backward reach with edge: (event: gate_D_S_c_stop) (guard: gate_D_S_Dir.closing) (assignments: gate_D_S_Dir := gate_D_S_Dir.off), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward reachability: iteration 2.
Backward controlled-behavior: not gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.opening) or not gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.opening) or (gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.opening) or gate_D_N_Dir.opening and gate_D_N_S.closed and (gate_D_S_S.closed and gate_D_S_Dir.opening)) -> <bdd 11n 6p> [backward reach with edge: (event: gate_D_N_u_s1_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.closed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 11n 6p> -> <bdd 12n 8p> [backward reach with edge: (event: gate_D_N_u_s2_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.bclosed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 12n 8p> -> <bdd 11n 6p> [backward reach with edge: (event: gate_D_N_u_s3_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fclosed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 11n 6p> -> <bdd 13n 10p> [backward reach with edge: (event: gate_D_N_u_s4_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.middle), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 13n 10p> -> <bdd 12n 8p> [backward reach with edge: (event: gate_D_N_u_s5_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.fopen), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 12n 8p> -> <bdd 13n 10p> [backward reach with edge: (event: gate_D_N_u_s6_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.open) (assignments: gate_D_N_S := gate_D_N_S.bopen), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 13n 10p> -> <bdd 19n 18p> [backward reach with edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off -> gate_D_N_Dir.off and (gate_D_N_S.fopen and button6.pushed) or (gate_D_N_Dir.off and ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed) or gate_D_N_Dir.off and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed))) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 19n 18p> -> <bdd 17n 26p> [backward reach with edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening -> gate_D_N_Dir.opening and (gate_D_N_S.fopen and button6.pushed) or (gate_D_N_Dir.opening and ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed) or gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed))) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 17n 26p> -> <bdd 21n 39p> [backward reach with edge: (event: gate_D_S_u_s1_off) (guard: gate_D_S_S.bclosed and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.closed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 21n 39p> -> <bdd 21n 52p> [backward reach with edge: (event: gate_D_S_u_s2_off) (guard: gate_D_S_S.fclosed and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.bclosed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 21n 52p> -> <bdd 20n 52p> [backward reach with edge: (event: gate_D_S_u_s3_off) (guard: gate_D_S_S.middle and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.fclosed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 20n 52p> -> <bdd 20n 65p> [backward reach with edge: (event: gate_D_S_u_s4_on) (guard: gate_D_S_S.fopen and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.middle), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 20n 65p> -> <bdd 21n 78p> [backward reach with edge: (event: gate_D_S_u_s5_on) (guard: gate_D_S_S.bopen and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.fopen), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 21n 78p> -> <bdd 21n 78p> [backward reach with edge: (event: gate_D_S_u_s6_on) (guard: gate_D_S_S.open and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.bopen), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 21n 78p> -> <bdd 28n 108p> [backward reach with edge: (event: gate_D_S_c_close) (guard: gate_D_S_Dir.off -> button6.pushed and (gate_D_S_S.fopen and gate_D_S_Dir.off) or (button6.pushed and ((gate_D_S_S.fclosed or gate_D_S_S.open) and gate_D_S_Dir.off) or button6.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and gate_D_S_Dir.off))) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward controlled-behavior: <bdd 28n 108p> -> <bdd 25n 108p> [backward reach with edge: (event: gate_D_S_c_close) (guard: gate_D_S_Dir.opening -> button6.pushed and (gate_D_S_S.fopen and gate_D_S_Dir.opening) or (button6.pushed and ((gate_D_S_S.fclosed or gate_D_S_S.open) and gate_D_S_Dir.opening) or button6.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and gate_D_S_Dir.opening))) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward reachability: iteration 3.
Backward controlled-behavior: <bdd 25n 108p> -> <bdd 10n 36p> [backward reach with edge: (event: button6_u_push) (guard: button6.released) (assignments: button6 := button6.pushed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Backward reachability: iteration 4.
Backward controlled-behavior: <bdd 10n 36p> [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 10n 27p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: <bdd 13n 1p> [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: <bdd 13n 1p> -> <bdd 12n 1p> [forward reach with edge: (event: button5_u_push) (guard: button5.released) (assignments: button5 := button5.pushed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 12n 1p> -> <bdd 11n 1p> [forward reach with edge: (event: button6_u_push) (guard: button6.released) (assignments: button6 := button6.pushed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 11n 1p> -> <bdd 17n 2p> [forward reach with edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.off -> gate_D_N_Dir.off and (gate_D_N_S.closed or gate_D_N_S.fopen) and (button6.released and (button5.pushed and s_equal_D.on)) or (gate_D_N_Dir.off and gate_D_N_S.fclosed and (button6.released and (button5.pushed and s_equal_D.on)) or gate_D_N_Dir.off and (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and (button6.released and (button5.pushed and s_equal_D.on)))) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 17n 2p> -> <bdd 22n 4p> [forward reach with edge: (event: gate_D_S_c_open) (guard: gate_D_S_Dir.off -> button6.released and button5.pushed and ((gate_D_S_S.closed or gate_D_S_S.fopen) and (gate_D_S_Dir.off and s_equal_D.on)) or (button6.released and button5.pushed and (gate_D_S_S.fclosed and (gate_D_S_Dir.off and s_equal_D.on)) or button6.released and button5.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and (gate_D_S_Dir.off and s_equal_D.on)))) (assignments: gate_D_S_Dir := gate_D_S_Dir.opening), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 22n 4p> -> <bdd 21n 4p> [forward reach with edge: (event: s_equal_D_u_equal_off) (guard: s_equal_D.on) (assignments: s_equal_D := s_equal_D.off), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward reachability: iteration 2.
Forward controlled-behavior: <bdd 21n 4p> -> <bdd 19n 3p> [forward reach with edge: (event: button5_u_release) (guard: button5.pushed) (assignments: button5 := button5.released), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 19n 3p> -> not gate_D_N_Dir.closing and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.closing) [forward reach with edge: (event: button6_u_push) (guard: button6.released) (assignments: button6 := button6.pushed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: not gate_D_N_Dir.closing and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.closing) -> gate_D_N_Dir.off and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.closing) or gate_D_N_Dir.opening and (gate_D_N_S.closed or gate_D_N_S.bclosed) and (gate_D_S_S.closed and not gate_D_S_Dir.closing) [forward reach with edge: (event: gate_D_N_u_s1_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.closed) (assignments: gate_D_N_S := gate_D_N_S.bclosed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: gate_D_N_Dir.off and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.closing) or gate_D_N_Dir.opening and (gate_D_N_S.closed or gate_D_N_S.bclosed) and (gate_D_S_S.closed and not gate_D_S_Dir.closing) -> <bdd 11n 3p> [forward reach with edge: (event: gate_D_N_u_s2_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.fclosed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 11n 3p> -> gate_D_N_Dir.off and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.closing) or gate_D_N_Dir.opening and (not gate_D_N_S.fopen and not gate_D_N_S.bopen) and (not gate_D_N_S.open and (gate_D_S_S.closed and not gate_D_S_Dir.closing)) [forward reach with edge: (event: gate_D_N_u_s3_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.middle), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: gate_D_N_Dir.off and gate_D_N_S.closed and (gate_D_S_S.closed and not gate_D_S_Dir.closing) or gate_D_N_Dir.opening and (not gate_D_N_S.fopen and not gate_D_N_S.bopen) and (not gate_D_N_S.open and (gate_D_S_S.closed and not gate_D_S_Dir.closing)) -> <bdd 12n 4p> [forward reach with edge: (event: gate_D_N_u_s4_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fopen), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 12n 4p> -> <bdd 11n 3p> [forward reach with edge: (event: gate_D_N_u_s5_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.bopen), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 11n 3p> -> <bdd 12n 4p> [forward reach with edge: (event: gate_D_N_u_s6_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.open), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 12n 4p> -> <bdd 18n 8p> [forward reach with edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening -> gate_D_N_Dir.opening and (gate_D_N_S.fopen and button6.pushed) or (gate_D_N_Dir.opening and ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed) or gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed))) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 18n 8p> -> <bdd 16n 10p> [forward reach with edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.off), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 16n 10p> -> <bdd 19n 20p> [forward reach with edge: (event: gate_D_S_u_s1_on) (guard: gate_D_S_S.closed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.bclosed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 19n 20p> -> <bdd 19n 30p> [forward reach with edge: (event: gate_D_S_u_s2_on) (guard: gate_D_S_S.bclosed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.fclosed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 19n 30p> -> <bdd 18n 30p> [forward reach with edge: (event: gate_D_S_u_s3_on) (guard: gate_D_S_S.fclosed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.middle), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 18n 30p> -> <bdd 18n 40p> [forward reach with edge: (event: gate_D_S_u_s4_off) (guard: gate_D_S_S.middle and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.fopen), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 18n 40p> -> <bdd 19n 50p> [forward reach with edge: (event: gate_D_S_u_s5_off) (guard: gate_D_S_S.fopen and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.bopen), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 19n 50p> -> <bdd 19n 50p> [forward reach with edge: (event: gate_D_S_u_s6_off) (guard: gate_D_S_S.bopen and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.open), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 19n 50p> -> <bdd 27n 120p> [forward reach with edge: (event: gate_D_S_c_close) (guard: gate_D_S_Dir.opening -> button6.pushed and (gate_D_S_S.fopen and gate_D_S_Dir.opening) or (button6.pushed and ((gate_D_S_S.fclosed or gate_D_S_S.open) and gate_D_S_Dir.opening) or button6.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and gate_D_S_Dir.opening))) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 27n 120p> -> <bdd 23n 108p> [forward reach with edge: (event: gate_D_S_c_stop) (guard: gate_D_S_Dir.opening) (assignments: gate_D_S_Dir := gate_D_S_Dir.off), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward reachability: iteration 3.
Forward controlled-behavior: <bdd 23n 108p> -> <bdd 16n 90p> [forward reach with edge: (event: button6_u_release) (guard: button6.pushed) (assignments: button6 := button6.released), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 16n 90p> -> <bdd 12n 54p> [forward reach with edge: (event: gate_D_N_u_s1_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.closed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward controlled-behavior: <bdd 12n 54p> -> <bdd 10n 36p> [forward reach with edge: (event: gate_D_S_u_s1_off) (guard: gate_D_S_S.bclosed and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.closed), restricted to current/previous controlled-behavior predicate: <bdd 10n 36p>]
Forward reachability: iteration 4.
Forward controlled-behavior: <bdd 10n 36p> [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: gate_D_N_c_open) (guard: gate_D_N_Dir.off -> gate_D_N_Dir.off and (gate_D_N_S.closed or gate_D_N_S.fopen) and (button6.released and (button5.pushed and s_equal_D.on)) or (gate_D_N_Dir.off and gate_D_N_S.fclosed and (button6.released and (button5.pushed and s_equal_D.on)) or gate_D_N_Dir.off and (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and (button6.released and (button5.pushed and s_equal_D.on)))) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening): guard: gate_D_N_Dir.off and (gate_D_N_S.closed or gate_D_N_S.fopen) and (button6.released and (button5.pushed and s_equal_D.on)) or (gate_D_N_Dir.off and gate_D_N_S.fclosed and (button6.released and (button5.pushed and s_equal_D.on)) or gate_D_N_Dir.off and (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and (button6.released and (button5.pushed and s_equal_D.on))) -> <bdd 12n 12p>.
Edge (event: gate_D_N_c_open) (guard: gate_D_N_Dir.closing -> gate_D_N_Dir.closing and (gate_D_N_S.closed or gate_D_N_S.fopen) and (button6.released and (button5.pushed and s_equal_D.on)) or (gate_D_N_Dir.closing and gate_D_N_S.fclosed and (button6.released and (button5.pushed and s_equal_D.on)) or gate_D_N_Dir.closing and (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and (button6.released and (button5.pushed and s_equal_D.on)))) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening): guard: gate_D_N_Dir.closing and (gate_D_N_S.closed or gate_D_N_S.fopen) and (button6.released and (button5.pushed and s_equal_D.on)) or (gate_D_N_Dir.closing and gate_D_N_S.fclosed and (button6.released and (button5.pushed and s_equal_D.on)) or gate_D_N_Dir.closing and (gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and (button6.released and (button5.pushed and s_equal_D.on))) -> <bdd 12n 12p>.
Edge (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off -> gate_D_N_Dir.off and (gate_D_N_S.fopen and button6.pushed) or (gate_D_N_Dir.off and ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed) or gate_D_N_Dir.off and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed))) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing): guard: gate_D_N_Dir.off and (gate_D_N_S.fopen and button6.pushed) or (gate_D_N_Dir.off and ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed) or gate_D_N_Dir.off and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed)) -> <bdd 13n 24p>.
Edge (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening -> gate_D_N_Dir.opening and (gate_D_N_S.fopen and button6.pushed) or (gate_D_N_Dir.opening and ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed) or gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed))) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing): guard: gate_D_N_Dir.opening and (gate_D_N_S.fopen and button6.pushed) or (gate_D_N_Dir.opening and ((gate_D_N_S.fclosed or gate_D_N_S.open) and button6.pushed) or gate_D_N_Dir.opening and ((gate_D_N_S.bclosed or (gate_D_N_S.middle or gate_D_N_S.bopen)) and button6.pushed)) -> <bdd 13n 24p>.
Edge (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening) (assignments: gate_D_N_Dir := gate_D_N_Dir.off): guard: gate_D_N_Dir.opening -> <bdd 10n 18p>.
Edge (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.closing) (assignments: gate_D_N_Dir := gate_D_N_Dir.off): guard: gate_D_N_Dir.closing -> <bdd 10n 18p>.
Edge (event: gate_D_S_c_open) (guard: gate_D_S_Dir.off -> button6.released and button5.pushed and ((gate_D_S_S.closed or gate_D_S_S.fopen) and (gate_D_S_Dir.off and s_equal_D.on)) or (button6.released and button5.pushed and (gate_D_S_S.fclosed and (gate_D_S_Dir.off and s_equal_D.on)) or button6.released and button5.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and (gate_D_S_Dir.off and s_equal_D.on)))) (assignments: gate_D_S_Dir := gate_D_S_Dir.opening): guard: button6.released and button5.pushed and ((gate_D_S_S.closed or gate_D_S_S.fopen) and (gate_D_S_Dir.off and s_equal_D.on)) or (button6.released and button5.pushed and (gate_D_S_S.fclosed and (gate_D_S_Dir.off and s_equal_D.on)) or button6.released and button5.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and (gate_D_S_Dir.off and s_equal_D.on))) -> <bdd 12n 12p>.
Edge (event: gate_D_S_c_open) (guard: gate_D_S_Dir.closing -> button6.released and button5.pushed and ((gate_D_S_S.closed or gate_D_S_S.fopen) and (gate_D_S_Dir.closing and s_equal_D.on)) or (button6.released and button5.pushed and (gate_D_S_S.fclosed and (gate_D_S_Dir.closing and s_equal_D.on)) or button6.released and button5.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and (gate_D_S_Dir.closing and s_equal_D.on)))) (assignments: gate_D_S_Dir := gate_D_S_Dir.opening): guard: button6.released and button5.pushed and ((gate_D_S_S.closed or gate_D_S_S.fopen) and (gate_D_S_Dir.closing and s_equal_D.on)) or (button6.released and button5.pushed and (gate_D_S_S.fclosed and (gate_D_S_Dir.closing and s_equal_D.on)) or button6.released and button5.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and (gate_D_S_Dir.closing and s_equal_D.on))) -> <bdd 12n 12p>.
Edge (event: gate_D_S_c_close) (guard: gate_D_S_Dir.off -> button6.pushed and (gate_D_S_S.fopen and gate_D_S_Dir.off) or (button6.pushed and ((gate_D_S_S.fclosed or gate_D_S_S.open) and gate_D_S_Dir.off) or button6.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and gate_D_S_Dir.off))) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing): guard: button6.pushed and (gate_D_S_S.fopen and gate_D_S_Dir.off) or (button6.pushed and ((gate_D_S_S.fclosed or gate_D_S_S.open) and gate_D_S_Dir.off) or button6.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and gate_D_S_Dir.off)) -> <bdd 13n 24p>.
Edge (event: gate_D_S_c_close) (guard: gate_D_S_Dir.opening -> button6.pushed and (gate_D_S_S.fopen and gate_D_S_Dir.opening) or (button6.pushed and ((gate_D_S_S.fclosed or gate_D_S_S.open) and gate_D_S_Dir.opening) or button6.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and gate_D_S_Dir.opening))) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing): guard: button6.pushed and (gate_D_S_S.fopen and gate_D_S_Dir.opening) or (button6.pushed and ((gate_D_S_S.fclosed or gate_D_S_S.open) and gate_D_S_Dir.opening) or button6.pushed and ((gate_D_S_S.bclosed or (gate_D_S_S.middle or gate_D_S_S.bopen)) and gate_D_S_Dir.opening)) -> <bdd 13n 24p>.
Edge (event: gate_D_S_c_stop) (guard: gate_D_S_Dir.opening) (assignments: gate_D_S_Dir := gate_D_S_Dir.off): guard: gate_D_S_Dir.opening -> <bdd 10n 18p>.
Edge (event: gate_D_S_c_stop) (guard: gate_D_S_Dir.closing) (assignments: gate_D_S_Dir := gate_D_S_Dir.off): guard: gate_D_S_Dir.closing -> <bdd 10n 18p>.

Final synthesis result:
  State: (controlled-behavior: <bdd 10n 36p>)
    Edge: (event: button5_u_push) (guard: button5.released) (assignments: button5 := button5.pushed)
    Edge: (event: button5_u_release) (guard: button5.pushed) (assignments: button5 := button5.released)
    Edge: (event: button6_u_push) (guard: button6.released) (assignments: button6 := button6.pushed)
    Edge: (event: button6_u_release) (guard: button6.pushed) (assignments: button6 := button6.released)
    Edge: (event: gate_D_N_u_s1_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.closed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s1_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.closed)
    Edge: (event: gate_D_N_u_s2_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.bclosed) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s2_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.bclosed)
    Edge: (event: gate_D_N_u_s3_on) (guard: gate_D_N_Dir.opening and gate_D_N_S.fclosed) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s3_off) (guard: gate_D_N_Dir.closing and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fclosed)
    Edge: (event: gate_D_N_u_s4_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.middle) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s4_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.middle)
    Edge: (event: gate_D_N_u_s5_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.fopen) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_u_s5_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.fopen)
    Edge: (event: gate_D_N_u_s6_off) (guard: gate_D_N_Dir.opening and gate_D_N_S.bopen) (assignments: gate_D_N_S := gate_D_N_S.open)
    Edge: (event: gate_D_N_u_s6_on) (guard: gate_D_N_Dir.closing and gate_D_N_S.open) (assignments: gate_D_N_S := gate_D_N_S.bopen)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.off -> <bdd 12n 12p>) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_open) (guard: gate_D_N_Dir.closing -> <bdd 12n 12p>) (assignments: gate_D_N_Dir := gate_D_N_Dir.opening)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.off -> <bdd 13n 24p>) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_close) (guard: gate_D_N_Dir.opening -> <bdd 13n 24p>) (assignments: gate_D_N_Dir := gate_D_N_Dir.closing)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.opening -> <bdd 10n 18p>) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)
    Edge: (event: gate_D_N_c_stop) (guard: gate_D_N_Dir.closing -> <bdd 10n 18p>) (assignments: gate_D_N_Dir := gate_D_N_Dir.off)
    Edge: (event: gate_D_S_u_s1_on) (guard: gate_D_S_S.closed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.bclosed)
    Edge: (event: gate_D_S_u_s1_off) (guard: gate_D_S_S.bclosed and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.closed)
    Edge: (event: gate_D_S_u_s2_on) (guard: gate_D_S_S.bclosed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.fclosed)
    Edge: (event: gate_D_S_u_s2_off) (guard: gate_D_S_S.fclosed and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.bclosed)
    Edge: (event: gate_D_S_u_s3_on) (guard: gate_D_S_S.fclosed and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.middle)
    Edge: (event: gate_D_S_u_s3_off) (guard: gate_D_S_S.middle and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.fclosed)
    Edge: (event: gate_D_S_u_s4_off) (guard: gate_D_S_S.middle and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.fopen)
    Edge: (event: gate_D_S_u_s4_on) (guard: gate_D_S_S.fopen and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.middle)
    Edge: (event: gate_D_S_u_s5_off) (guard: gate_D_S_S.fopen and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.bopen)
    Edge: (event: gate_D_S_u_s5_on) (guard: gate_D_S_S.bopen and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.fopen)
    Edge: (event: gate_D_S_u_s6_off) (guard: gate_D_S_S.bopen and gate_D_S_Dir.opening) (assignments: gate_D_S_S := gate_D_S_S.open)
    Edge: (event: gate_D_S_u_s6_on) (guard: gate_D_S_S.open and gate_D_S_Dir.closing) (assignments: gate_D_S_S := gate_D_S_S.bopen)
    Edge: (event: gate_D_S_c_open) (guard: gate_D_S_Dir.off -> <bdd 12n 12p>) (assignments: gate_D_S_Dir := gate_D_S_Dir.opening)
    Edge: (event: gate_D_S_c_open) (guard: gate_D_S_Dir.closing -> <bdd 12n 12p>) (assignments: gate_D_S_Dir := gate_D_S_Dir.opening)
    Edge: (event: gate_D_S_c_close) (guard: gate_D_S_Dir.off -> <bdd 13n 24p>) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing)
    Edge: (event: gate_D_S_c_close) (guard: gate_D_S_Dir.opening -> <bdd 13n 24p>) (assignments: gate_D_S_Dir := gate_D_S_Dir.closing)
    Edge: (event: gate_D_S_c_stop) (guard: gate_D_S_Dir.opening -> <bdd 10n 18p>) (assignments: gate_D_S_Dir := gate_D_S_Dir.off)
    Edge: (event: gate_D_S_c_stop) (guard: gate_D_S_Dir.closing -> <bdd 10n 18p>) (assignments: gate_D_S_Dir := gate_D_S_Dir.off)
    Edge: (event: s_equal_D_u_equal_on) (guard: s_equal_D.off) (assignments: s_equal_D := s_equal_D.on)
    Edge: (event: s_equal_D_u_equal_off) (guard: s_equal_D.on) (assignments: s_equal_D := s_equal_D.off)

Controlled system:                     exactly 3,528 states.

Initial (synthesis result):            <bdd 10n 36p>
Initial (uncontrolled system):         <bdd 13n 1p>
Initial (controlled system):           <bdd 13n 1p>
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event gate_D_N_c_open: guard: <bdd 11n 12p> -> true [assume <bdd 11n 12p>].
  Event gate_D_N_c_close: guard: <bdd 12n 24p> -> true [assume <bdd 12n 24p>].
  Event gate_D_N_c_stop: guard: <bdd 11n 36p> -> true [assume <bdd 11n 36p>].
  Event gate_D_S_c_open: guard: <bdd 11n 12p> -> true [assume <bdd 11n 12p>].
  Event gate_D_S_c_close: guard: <bdd 12n 24p> -> true [assume <bdd 12n 24p>].
  Event gate_D_S_c_stop: guard: <bdd 11n 36p> -> true [assume <bdd 11n 36p>].

Constructing output CIF specification.
Writing output CIF file "generated_files_MLDES/subplant_2_sup.cif".
