Reading CIF file "generated_files_extended_modular/subplant_29.cif".
Preprocessing CIF specification.
Converting CIF specification to internal format.

CIF variables and location pointers:
  Nr     Kind              Type  Name         Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   culvert_N_A  0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   culvert_N_S  1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   pad_N_A      2      2 * 2     3 * 2       4 * 2       75%
  4      location pointer  n/a   pad_N_S1     3      2 * 2     3 * 2       4 * 2       75%
  5      location pointer  n/a   pad_N_S2     4      2 * 2     3 * 2       4 * 2       75%
  6      location pointer  n/a   pad_N_S3     5      2 * 2     3 * 2       4 * 2       75%
  7      location pointer  n/a   pad_S_A      6      2 * 2     3 * 2       4 * 2       75%
  8      location pointer  n/a   pad_S_S1     7      2 * 2     3 * 2       4 * 2       75%
  9      location pointer  n/a   pad_S_S2     8      2 * 2     3 * 2       4 * 2       75%
  10     location pointer  n/a   pad_S_S3     9      2 * 2     3 * 2       4 * 2       75%
  -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
  Total                                       10     36        56          72          ~78%

Applying automatic variable ordering:
  Number of hyperedges: 35

  Applying FORCE algorithm:
    Maximum number of iterations: 30

    Total span:                   57 (total)                 1.63 (avg/edge) [before]
    Total span:                   49 (total)                 1.40 (avg/edge) [iteration 1]
    Total span:                   49 (total)                 1.40 (avg/edge) [iteration 2]
    Total span:                   49 (total)                 1.40 (avg/edge) [after]

  Applying sliding window algorithm:
    Window length: 4

    Total span:                   49 (total)                 1.40 (avg/edge) [before]
    Total span:                   41 (total)                 1.17 (avg/edge) [window 0..3]
    Total span:                   41 (total)                 1.17 (avg/edge) [after]

  Variable order changed.

CIF variables and location pointers:
  Nr     Kind              Type  Name         Group  BDD vars  CIF values  BDD values  Values used
  -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
  1      location pointer  n/a   culvert_N_S  0      1 * 2     2 * 2       2 * 2       100%
  2      location pointer  n/a   culvert_N_A  1      1 * 2     2 * 2       2 * 2       100%
  3      location pointer  n/a   pad_N_S1     2      2 * 2     3 * 2       4 * 2       75%
  4      location pointer  n/a   pad_N_A      3      2 * 2     3 * 2       4 * 2       75%
  5      location pointer  n/a   pad_N_S2     4      2 * 2     3 * 2       4 * 2       75%
  6      location pointer  n/a   pad_N_S3     5      2 * 2     3 * 2       4 * 2       75%
  7      location pointer  n/a   pad_S_S1     6      2 * 2     3 * 2       4 * 2       75%
  8      location pointer  n/a   pad_S_S2     7      2 * 2     3 * 2       4 * 2       75%
  9      location pointer  n/a   pad_S_A      8      2 * 2     3 * 2       4 * 2       75%
  10     location pointer  n/a   pad_S_S3     9      2 * 2     3 * 2       4 * 2       75%
  -----  ----------------  ----  -----------  -----  --------  ----------  ----------  -----------
  Total                                       10     36        56          72          ~78%

Starting data-based synthesis.

Invariant (components state invariant):  true
Invariant (locations state invariant):   true
Invariant (system state invariant):      true

Initial   (discrete variables):          true
Initial   (components init predicate):   true
Initial   (aut/locs init predicate):     pad_N_A.rest
Initial   (aut/locs init predicate):     pad_N_S1.closed
Initial   (aut/locs init predicate):     pad_N_S2.closed
Initial   (aut/locs init predicate):     pad_N_S3.closed
Initial   (aut/locs init predicate):     pad_S_A.rest
Initial   (aut/locs init predicate):     pad_S_S1.closed
Initial   (aut/locs init predicate):     pad_S_S2.closed
Initial   (aut/locs init predicate):     pad_S_S3.closed
Initial   (aut/locs init predicate):     culvert_N_A.closed
Initial   (aut/locs init predicate):     culvert_N_S.noflow
Initial   (auts/locs init predicate):    <bdd 18n 1p>
Initial   (uncontrolled system):         <bdd 18n 1p>
Initial   (system, combined init/inv):   <bdd 18n 1p>

Marked    (components marker predicate): true
Marked    (aut/locs marker predicate):   pad_N_A.rest
Marked    (aut/locs marker predicate):   pad_N_S1.closed
Marked    (aut/locs marker predicate):   pad_N_S2.closed
Marked    (aut/locs marker predicate):   pad_N_S3.closed
Marked    (aut/locs marker predicate):   pad_S_A.rest
Marked    (aut/locs marker predicate):   pad_S_S1.closed
Marked    (aut/locs marker predicate):   pad_S_S2.closed
Marked    (aut/locs marker predicate):   pad_S_S3.closed
Marked    (aut/locs marker predicate):   culvert_N_A.closed
Marked    (aut/locs marker predicate):   culvert_N_S.noflow
Marked    (auts/locs marker predicate):  <bdd 18n 1p>
Marked    (uncontrolled system):         <bdd 18n 1p>
Marked    (system, combined marked/inv): <bdd 18n 1p>

State/event exclusion requirements:
  Event "culvert_N_c_enable" needs:
    <bdd 16n 4p>

Uncontrolled system:
  State: (controlled-behavior: ?)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open)
    Edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open)
    Edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open)
    Edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed)
    Edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed)
    Edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed)
    Edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_S1_u_closed_off) (guard: pad_S_S1.closed and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S1_u_open_on) (guard: pad_S_S1.between and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.open)
    Edge: (event: pad_S_S2_u_closed_off) (guard: pad_S_S2.closed and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S2_u_open_on) (guard: pad_S_S2.between and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.open)
    Edge: (event: pad_S_S3_u_closed_off) (guard: pad_S_A.opening and pad_S_S3.closed) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: pad_S_S3_u_open_on) (guard: pad_S_A.opening and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.open)
    Edge: (event: pad_S_S1_u_closed_on) (guard: pad_S_S1.between and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.closed)
    Edge: (event: pad_S_S1_u_open_off) (guard: pad_S_S1.open and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S2_u_closed_on) (guard: pad_S_S2.between and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.closed)
    Edge: (event: pad_S_S2_u_open_off) (guard: pad_S_S2.open and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S3_u_closed_on) (guard: pad_S_A.closing and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.closed)
    Edge: (event: pad_S_S3_u_open_off) (guard: pad_S_A.closing and pad_S_S3.open) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed) (assignments: culvert_N_A := culvert_N_A.open)
    Edge: (event: culvert_N_u_off) (guard: culvert_N_S.flow and culvert_N_A.closed) (assignments: culvert_N_S := culvert_N_S.noflow)
    Edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed)
    Edge: (event: culvert_N_u_on) (guard: culvert_N_S.noflow and culvert_N_A.open) (assignments: culvert_N_S := culvert_N_S.flow)

Initialized controlled-behavior predicate using invariants: true.

Extending controlled-behavior predicate using variable ranges.

Controlled behavior: true -> true [range: true, variable: location pointer for automaton "pad_N_S1" (group: 2, domain: 4+5, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "pad_N_A" (group: 3, domain: 6+7, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: true -> true [range: true, variable: location pointer for automaton "pad_N_S2" (group: 4, domain: 8+9, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: true -> <bdd 8n 16p> [range: true, variable: location pointer for automaton "pad_N_S3" (group: 5, domain: 10+11, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: <bdd 8n 16p> -> <bdd 10n 32p> [range: true, variable: location pointer for automaton "pad_S_S1" (group: 6, domain: 12+13, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: <bdd 10n 32p> -> <bdd 12n 64p> [range: true, variable: location pointer for automaton "pad_S_S2" (group: 7, domain: 14+15, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: <bdd 12n 64p> -> <bdd 14n 128p> [range: true, variable: location pointer for automaton "pad_S_A" (group: 8, domain: 16+17, BDD variables: 2, CIF/BDD values: 3/4)].
Controlled behavior: <bdd 14n 128p> -> <bdd 16n 256p> [range: true, variable: location pointer for automaton "pad_S_S3" (group: 9, domain: 18+19, BDD variables: 2, CIF/BDD values: 3/4)].

Extended controlled-behavior predicate using variable ranges: <bdd 16n 256p>.

Restricting behavior using state/event exclusion requirements.

Edge (event: culvert_N_c_enable) (guard: culvert_N_A.closed) (assignments: culvert_N_A := culvert_N_A.open): guard: culvert_N_A.closed -> <bdd 17n 4p> [requirement: <bdd 16n 4p>].

Restricted behavior using state/event exclusion requirements:
  State: (controlled-behavior: <bdd 16n 256p>)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open)
    Edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open)
    Edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open)
    Edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed)
    Edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed)
    Edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed)
    Edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_S1_u_closed_off) (guard: pad_S_S1.closed and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S1_u_open_on) (guard: pad_S_S1.between and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.open)
    Edge: (event: pad_S_S2_u_closed_off) (guard: pad_S_S2.closed and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S2_u_open_on) (guard: pad_S_S2.between and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.open)
    Edge: (event: pad_S_S3_u_closed_off) (guard: pad_S_A.opening and pad_S_S3.closed) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: pad_S_S3_u_open_on) (guard: pad_S_A.opening and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.open)
    Edge: (event: pad_S_S1_u_closed_on) (guard: pad_S_S1.between and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.closed)
    Edge: (event: pad_S_S1_u_open_off) (guard: pad_S_S1.open and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S2_u_closed_on) (guard: pad_S_S2.between and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.closed)
    Edge: (event: pad_S_S2_u_open_off) (guard: pad_S_S2.open and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S3_u_closed_on) (guard: pad_S_A.closing and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.closed)
    Edge: (event: pad_S_S3_u_open_off) (guard: pad_S_A.closing and pad_S_S3.open) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed -> <bdd 17n 4p>) (assignments: culvert_N_A := culvert_N_A.open)
    Edge: (event: culvert_N_u_off) (guard: culvert_N_S.flow and culvert_N_A.closed) (assignments: culvert_N_S := culvert_N_S.noflow)
    Edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed)
    Edge: (event: culvert_N_u_on) (guard: culvert_N_S.noflow and culvert_N_A.open) (assignments: culvert_N_S := culvert_N_S.flow)

Round 1: started.

Round 1: computing backward controlled-behavior predicate.
Backward controlled-behavior: <bdd 18n 1p> [marker predicate]
Backward reachability: iteration 1.
Backward controlled-behavior: <bdd 18n 1p> -> <bdd 17n 1p> [backward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 17n 1p> -> <bdd 18n 2p> [backward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 18n 2p> -> <bdd 21n 3p> [backward reach with edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 21n 3p> -> <bdd 21n 4p> [backward reach with edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 21n 4p> -> <bdd 22n 5p> [backward reach with edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 22n 5p> -> <bdd 23n 8p> [backward reach with edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 23n 8p> -> <bdd 24n 8p> [backward reach with edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 24n 8p> -> <bdd 25n 14p> [backward reach with edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 25n 14p> -> <bdd 24n 14p> [backward reach with edge: (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 24n 14p> -> <bdd 25n 28p> [backward reach with edge: (event: pad_S_c_stop) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 25n 28p> -> <bdd 30n 42p> [backward reach with edge: (event: pad_S_S1_u_closed_on) (guard: pad_S_S1.between and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 30n 42p> -> <bdd 30n 56p> [backward reach with edge: (event: pad_S_S1_u_open_off) (guard: pad_S_S1.open and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 30n 56p> -> <bdd 29n 70p> [backward reach with edge: (event: pad_S_S2_u_closed_on) (guard: pad_S_S2.between and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 29n 70p> -> <bdd 30n 112p> [backward reach with edge: (event: pad_S_S2_u_open_off) (guard: pad_S_S2.open and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 30n 112p> -> <bdd 31n 126p> [backward reach with edge: (event: pad_S_S3_u_closed_on) (guard: pad_S_A.closing and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 31n 126p> -> <bdd 32n 224p> [backward reach with edge: (event: pad_S_S3_u_open_off) (guard: pad_S_A.closing and pad_S_S3.open) (assignments: pad_S_S3 := pad_S_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 32n 224p> -> <bdd 31n 224p> [backward reach with edge: (event: culvert_N_u_off) (guard: culvert_N_S.flow and culvert_N_A.closed) (assignments: culvert_N_S := culvert_N_S.noflow), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 31n 224p> -> <bdd 30n 224p> [backward reach with edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward reachability: iteration 2.
Backward controlled-behavior: <bdd 30n 224p> -> <bdd 28n 208p> [backward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 28n 208p> -> <bdd 23n 256p> [backward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 23n 256p> -> <bdd 21n 240p> [backward reach with edge: (event: pad_S_c_close) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward controlled-behavior: <bdd 21n 240p> -> <bdd 16n 256p> [backward reach with edge: (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Backward reachability: iteration 3.
Backward controlled-behavior: <bdd 16n 256p> [fixed point].

Round 1: computing backward uncontrolled bad-state predicate.
Backward uncontrolled bad-state: <bdd 16n 255p> [current/previous controlled behavior predicate]
Backward reachability: iteration 1.

Round 1: computing forward controlled-behavior predicate.
Forward controlled-behavior: <bdd 18n 1p> [initialization predicate]
Forward reachability: iteration 1.
Forward controlled-behavior: <bdd 18n 1p> -> <bdd 17n 1p> [forward reach with edge: (event: pad_N_c_open) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.opening), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 17n 1p> -> <bdd 18n 2p> [forward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 18n 2p> -> <bdd 20n 3p> [forward reach with edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 20n 3p> -> <bdd 20n 4p> [forward reach with edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 20n 4p> -> <bdd 20n 4p> [forward reach with edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 20n 4p> -> <bdd 21n 7p> [forward reach with edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 21n 7p> -> <bdd 22n 7p> [forward reach with edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 22n 7p> -> <bdd 23n 13p> [forward reach with edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 23n 13p> -> <bdd 22n 13p> [forward reach with edge: (event: pad_S_c_open) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.opening), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 22n 13p> -> <bdd 23n 26p> [forward reach with edge: (event: pad_S_c_close) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 23n 26p> -> <bdd 27n 39p> [forward reach with edge: (event: pad_S_S1_u_closed_off) (guard: pad_S_S1.closed and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 27n 39p> -> <bdd 27n 52p> [forward reach with edge: (event: pad_S_S1_u_open_on) (guard: pad_S_S1.between and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 27n 52p> -> <bdd 26n 65p> [forward reach with edge: (event: pad_S_S2_u_closed_off) (guard: pad_S_S2.closed and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 26n 65p> -> <bdd 27n 104p> [forward reach with edge: (event: pad_S_S2_u_open_on) (guard: pad_S_S2.between and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 27n 104p> -> <bdd 27n 104p> [forward reach with edge: (event: pad_S_S3_u_closed_off) (guard: pad_S_A.opening and pad_S_S3.closed) (assignments: pad_S_S3 := pad_S_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 27n 104p> -> <bdd 28n 195p> [forward reach with edge: (event: pad_S_S3_u_open_on) (guard: pad_S_A.opening and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 28n 195p> -> <bdd 40n 196p> [forward reach with edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed -> <bdd 17n 4p>) (assignments: culvert_N_A := culvert_N_A.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 40n 196p> -> <bdd 41n 197p> [forward reach with edge: (event: culvert_N_u_on) (guard: culvert_N_S.noflow and culvert_N_A.open) (assignments: culvert_N_S := culvert_N_S.flow), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward reachability: iteration 2.
Forward controlled-behavior: <bdd 41n 197p> -> <bdd 42n 199p> [forward reach with edge: (event: pad_N_c_open) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.opening), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 42n 199p> -> <bdd 44n 379p> [forward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 44n 379p> -> <bdd 37n 244p> [forward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 37n 244p> -> <bdd 39n 246p> [forward reach with edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 39n 246p> -> <bdd 39n 248p> [forward reach with edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 39n 248p> -> <bdd 39n 248p> [forward reach with edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 39n 248p> -> <bdd 40n 254p> [forward reach with edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 40n 254p> -> <bdd 41n 254p> [forward reach with edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 41n 254p> -> <bdd 42n 266p> [forward reach with edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 42n 266p> -> <bdd 43n 292p> [forward reach with edge: (event: pad_S_c_open) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.opening), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 43n 292p> -> <bdd 45n 516p> [forward reach with edge: (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 45n 516p> -> <bdd 39n 308p> [forward reach with edge: (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 39n 308p> -> <bdd 43n 334p> [forward reach with edge: (event: pad_S_S1_u_closed_off) (guard: pad_S_S1.closed and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 43n 334p> -> <bdd 43n 360p> [forward reach with edge: (event: pad_S_S1_u_open_on) (guard: pad_S_S1.between and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 43n 360p> -> <bdd 42n 386p> [forward reach with edge: (event: pad_S_S2_u_closed_off) (guard: pad_S_S2.closed and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 42n 386p> -> <bdd 43n 464p> [forward reach with edge: (event: pad_S_S2_u_open_on) (guard: pad_S_S2.between and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 43n 464p> -> <bdd 43n 464p> [forward reach with edge: (event: pad_S_S3_u_closed_off) (guard: pad_S_A.opening and pad_S_S3.closed) (assignments: pad_S_S3 := pad_S_S3.between), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 43n 464p> -> <bdd 42n 646p> [forward reach with edge: (event: pad_S_S3_u_open_on) (guard: pad_S_A.opening and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.open), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 42n 646p> -> <bdd 41n 646p> [forward reach with edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward reachability: iteration 3.
Forward controlled-behavior: <bdd 41n 646p> -> <bdd 43n 1,006p> [forward reach with edge: (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 43n 1,006p> -> <bdd 36n 736p> [forward reach with edge: (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 36n 736p> -> <bdd 38n 1,184p> [forward reach with edge: (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward controlled-behavior: <bdd 38n 1,184p> -> <bdd 16n 256p> [forward reach with edge: (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest), restricted to current/previous controlled-behavior predicate: <bdd 16n 256p>]
Forward reachability: iteration 4.
Forward controlled-behavior: <bdd 16n 256p> [fixed point].

Round 1: finished, controlled behavior is stable.

Computing controlled system guards.

Edge (event: pad_N_c_open) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.opening): guard: pad_N_A.rest -> <bdd 16n 128p>.
Edge (event: pad_N_c_open) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.opening): guard: pad_N_A.closing -> <bdd 16n 128p>.
Edge (event: pad_N_c_close) (guard: pad_N_A.rest) (assignments: pad_N_A := pad_N_A.closing): guard: pad_N_A.rest -> <bdd 16n 128p>.
Edge (event: pad_N_c_close) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.closing): guard: pad_N_A.opening -> <bdd 16n 128p>.
Edge (event: pad_N_c_stop) (guard: pad_N_A.opening) (assignments: pad_N_A := pad_N_A.rest): guard: pad_N_A.opening -> <bdd 16n 128p>.
Edge (event: pad_N_c_stop) (guard: pad_N_A.closing) (assignments: pad_N_A := pad_N_A.rest): guard: pad_N_A.closing -> <bdd 16n 128p>.
Edge (event: pad_S_c_open) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.opening): guard: pad_S_A.rest -> <bdd 16n 128p>.
Edge (event: pad_S_c_open) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.opening): guard: pad_S_A.closing -> <bdd 16n 128p>.
Edge (event: pad_S_c_close) (guard: pad_S_A.rest) (assignments: pad_S_A := pad_S_A.closing): guard: pad_S_A.rest -> <bdd 16n 128p>.
Edge (event: pad_S_c_close) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.closing): guard: pad_S_A.opening -> <bdd 16n 128p>.
Edge (event: pad_S_c_stop) (guard: pad_S_A.opening) (assignments: pad_S_A := pad_S_A.rest): guard: pad_S_A.opening -> <bdd 16n 128p>.
Edge (event: pad_S_c_stop) (guard: pad_S_A.closing) (assignments: pad_S_A := pad_S_A.rest): guard: pad_S_A.closing -> <bdd 16n 128p>.
Edge (event: culvert_N_c_enable) (guard: culvert_N_A.closed -> <bdd 17n 4p>) (assignments: culvert_N_A := culvert_N_A.open): guard: <bdd 17n 4p> -> <bdd 15n 1p>.
Edge (event: culvert_N_c_disable) (guard: culvert_N_A.open) (assignments: culvert_N_A := culvert_N_A.closed): guard: culvert_N_A.open -> <bdd 17n 256p>.

Final synthesis result:
  State: (controlled-behavior: <bdd 16n 256p>)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.rest -> <bdd 16n 128p>) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_open) (guard: pad_N_A.closing -> <bdd 16n 128p>) (assignments: pad_N_A := pad_N_A.opening)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.rest -> <bdd 16n 128p>) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_close) (guard: pad_N_A.opening -> <bdd 16n 128p>) (assignments: pad_N_A := pad_N_A.closing)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.opening -> <bdd 16n 128p>) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_c_stop) (guard: pad_N_A.closing -> <bdd 16n 128p>) (assignments: pad_N_A := pad_N_A.rest)
    Edge: (event: pad_N_S1_u_closed_off) (guard: pad_N_S1.closed and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S1_u_open_on) (guard: pad_N_S1.between and pad_N_A.opening) (assignments: pad_N_S1 := pad_N_S1.open)
    Edge: (event: pad_N_S2_u_closed_off) (guard: pad_N_A.opening and pad_N_S2.closed) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S2_u_open_on) (guard: pad_N_A.opening and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.open)
    Edge: (event: pad_N_S3_u_closed_off) (guard: pad_N_A.opening and pad_N_S3.closed) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_N_S3_u_open_on) (guard: pad_N_A.opening and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.open)
    Edge: (event: pad_N_S1_u_closed_on) (guard: pad_N_S1.between and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.closed)
    Edge: (event: pad_N_S1_u_open_off) (guard: pad_N_S1.open and pad_N_A.closing) (assignments: pad_N_S1 := pad_N_S1.between)
    Edge: (event: pad_N_S2_u_closed_on) (guard: pad_N_A.closing and pad_N_S2.between) (assignments: pad_N_S2 := pad_N_S2.closed)
    Edge: (event: pad_N_S2_u_open_off) (guard: pad_N_A.closing and pad_N_S2.open) (assignments: pad_N_S2 := pad_N_S2.between)
    Edge: (event: pad_N_S3_u_closed_on) (guard: pad_N_A.closing and pad_N_S3.between) (assignments: pad_N_S3 := pad_N_S3.closed)
    Edge: (event: pad_N_S3_u_open_off) (guard: pad_N_A.closing and pad_N_S3.open) (assignments: pad_N_S3 := pad_N_S3.between)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.rest -> <bdd 16n 128p>) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_open) (guard: pad_S_A.closing -> <bdd 16n 128p>) (assignments: pad_S_A := pad_S_A.opening)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.rest -> <bdd 16n 128p>) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_close) (guard: pad_S_A.opening -> <bdd 16n 128p>) (assignments: pad_S_A := pad_S_A.closing)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.opening -> <bdd 16n 128p>) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_c_stop) (guard: pad_S_A.closing -> <bdd 16n 128p>) (assignments: pad_S_A := pad_S_A.rest)
    Edge: (event: pad_S_S1_u_closed_off) (guard: pad_S_S1.closed and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S1_u_open_on) (guard: pad_S_S1.between and pad_S_A.opening) (assignments: pad_S_S1 := pad_S_S1.open)
    Edge: (event: pad_S_S2_u_closed_off) (guard: pad_S_S2.closed and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S2_u_open_on) (guard: pad_S_S2.between and pad_S_A.opening) (assignments: pad_S_S2 := pad_S_S2.open)
    Edge: (event: pad_S_S3_u_closed_off) (guard: pad_S_A.opening and pad_S_S3.closed) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: pad_S_S3_u_open_on) (guard: pad_S_A.opening and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.open)
    Edge: (event: pad_S_S1_u_closed_on) (guard: pad_S_S1.between and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.closed)
    Edge: (event: pad_S_S1_u_open_off) (guard: pad_S_S1.open and pad_S_A.closing) (assignments: pad_S_S1 := pad_S_S1.between)
    Edge: (event: pad_S_S2_u_closed_on) (guard: pad_S_S2.between and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.closed)
    Edge: (event: pad_S_S2_u_open_off) (guard: pad_S_S2.open and pad_S_A.closing) (assignments: pad_S_S2 := pad_S_S2.between)
    Edge: (event: pad_S_S3_u_closed_on) (guard: pad_S_A.closing and pad_S_S3.between) (assignments: pad_S_S3 := pad_S_S3.closed)
    Edge: (event: pad_S_S3_u_open_off) (guard: pad_S_A.closing and pad_S_S3.open) (assignments: pad_S_S3 := pad_S_S3.between)
    Edge: (event: culvert_N_c_enable) (guard: culvert_N_A.closed -> <bdd 15n 1p>) (assignments: culvert_N_A := culvert_N_A.open)
    Edge: (event: culvert_N_u_off) (guard: culvert_N_S.flow and culvert_N_A.closed) (assignments: culvert_N_S := culvert_N_S.noflow)
    Edge: (event: culvert_N_c_disable) (guard: culvert_N_A.open -> <bdd 17n 256p>) (assignments: culvert_N_A := culvert_N_A.closed)
    Edge: (event: culvert_N_u_on) (guard: culvert_N_S.noflow and culvert_N_A.open) (assignments: culvert_N_S := culvert_N_S.flow)

Controlled system:                     exactly 26,244 states.

Initial (synthesis result):            <bdd 16n 256p>
Initial (uncontrolled system):         <bdd 18n 1p>
Initial (controlled system):           <bdd 18n 1p>
Initial (removed by supervisor):       false
Initial (added by supervisor):         true

Simplification of controlled system under the assumption of the plants, requirement automata, state/event exclusion requirement invariants, state requirement invariants, and controlled behavior:
  Event pad_N_c_open: guard: <bdd 15n 128p> -> true [assume <bdd 15n 128p>].
  Event pad_N_c_close: guard: <bdd 15n 128p> -> true [assume <bdd 15n 128p>].
  Event pad_N_c_stop: guard: <bdd 17n 256p> -> true [assume <bdd 17n 256p>].
  Event pad_S_c_open: guard: <bdd 15n 128p> -> true [assume <bdd 15n 128p>].
  Event pad_S_c_close: guard: <bdd 15n 128p> -> true [assume <bdd 15n 128p>].
  Event pad_S_c_stop: guard: <bdd 17n 256p> -> true [assume <bdd 17n 256p>].
  Event culvert_N_c_enable: guard: <bdd 15n 1p> -> true [assume <bdd 15n 1p>].
  Event culvert_N_c_disable: guard: <bdd 17n 256p> -> true [assume <bdd 17n 256p>].

Constructing output CIF specification.
Writing output CIF file "generated_files_extended_modular/subplant_29_sup.cif".
